%plot_mEP_results.m
%
%generate results for mEP detection using results file generated by script
%process_patients_EP.m

%% Initialization: load and align data
%load('EP_112723_mepdetect.mat')

%load('EP_mEP_011722.mat')
%load('EP_mEP_012723_tuned.mat')
%load('EP_mEP_012522_bpfilt_5to1000_test.mat')
load('EPdata_5-17-2020_ANALYZED_postopMRI.mat')
%load('mep_labels_co.mat')

load('EP_090224_mepdetect_nofilt.mat')

%
addpath(genpath('./Violinplot-Matlab'));
% addpath(genpath('M:\software\code\eo_dlep\evokedpotentials')); 
% addpath(genpath('M:\software\code\eo_dlep\lib'));+

EP_reordered = readtable('EP_reordered.xlsx','Format','auto');

pt_num_list = [10,11,12,14,15,17,18,25,26];
emg_mapping_pts = {'ephys010','ephys011','ephys012','ephys014','ephys015',...
        'ephys017','ephys018','ephys025','ephys026'}; %manual channel assignment because names don't match
emg_mapping_sm = {[1:8], [1:8], [1:8], [1:8], [1:8], [1:8],[1 2 3 4 6 5 8 7], [1 2 4 5 6 7], [1, 2, 4, 5]};

emg_mapping_all = {[1 2 3 4 10 5 7 9], [1 2 3 4 10 5 11 8], [1 2 3 4 10 5 7 11], [1 2 3 4 7 5 12 11], [1 2 3 4 7 5 12 11], [1 2 3 4 5 8 11 13],...
            [1 2 3 4 5 7 11 12], [1 2 4 5 8 11], [1 2 4 6]};
emg_mapping_labels = {'Biceps', 'ECR', 'FCR', 'FDI', 'Nasalis', 'Hypoglossus', 'Genioglossus',...
    'Orb oris','Trap', 'Tibia','Ipsi nasalis','Ipsi genioglossus', 'Ipsi orb oris'};

%latency_labels = {'Bicep','ECR','FCR','FDI','Nasalis','Orb oris','Geniogl','Trap'};
%latencies = [12.92,24.56;19.59,29.24;20.31,28.69;22.15,34.86;9.98,18;9.98,18;10.17,14.21;10.17,14.21;14.71,14.71;12.92,24.56; 9.98,18;9.98,18;10.17,14.21];
    %original
latencies = [16.92,24.56;16.59,29.24;18.31,28.69;24,32;8,13;7.98,18;9,12;...
            8.17,14.21;14.71,14.71;12.92,24.56; 8,13;9,12;8.17,14.21];

latency_tolerance = 3;

fs = 22000;

co_dir = './manual detection';
co_ampdir = './amplitudes';

pt_inds_co = [6,7,8,10,12]; %matching co patients with tested sm patients
pt_inds_co_sm = [1 2 3 4 6];

% Process CO files into data structure
cd(co_ampdir)
co_amp_files = dir;

for kk = 1:length(co_amp_files)
    if contains(co_amp_files(kk).name,'Amp.mat') && ~strcmp(co_amp_files(kk).name(1),'.')
        temp = load(co_amp_files(kk).name);
    end
end

dlep_fill_exc = true; %adjust DLEP data for excluded 130 Hz trials

mep_labels_sm = cell(0,1);
mep_amps_sm = cell(0,1);
mep_ampsp2p_sm = cell(0,1); 
mep_delays_sm = cell(0,1); %one delay value of biggest peak per mEP
mep_delays_sm_all = cell(0,1); %all delay values

amplitudes = cell(0,1);
cathodes = cell(0,1);
anodes = cell(0,1);

ep_struct_inds_sm = [];
ep_struct_inds_co = [];

reordered_inds = cell(0,1);

for kk = 1:length(ep_struct)
    patient_ID = ep_struct(kk).patient_ID;

    
    for kl = 1:length(ep_struct(kk).pt_info.freqs_exclude)
        if ep_struct(kk).pt_info.freqs_exclude(kl) == 1
            temprow = cell(1,size(ep_struct(kk).dlep.raw_means,2));
            ep_struct(kk).dlep.raw_means = [ep_struct(kk).dlep.raw_means(1:kl-1,:); temprow; ep_struct(kk).dlep.raw_means(kl:end,:)];
            ep_struct(kk).dlep.filt_means = [ep_struct(kk).dlep.filt_means(1:kl-1,:); temprow; ep_struct(kk).dlep.filt_means(kl:end,:)];
            ep_struct(kk).dlep.stim_arts = [ep_struct(kk).dlep.stim_arts(1:kl-1,:); temprow; ep_struct(kk).dlep.stim_arts(kl:end,:)];
        end
    end
    
    amplitudes = [amplitudes; {ep_struct(kk).stim_settings.amplitudes}];
    cathodes = [cathodes; {ep_struct(kk).stim_settings.cathodes}];
    anodes = [anodes; {ep_struct(kk).stim_settings.cathodes}];

    %mep_reordered = EP_reordered.(patient_ID);

    pts_labeled_sm = {EP(:).code};
    if ~any(strcmp(pts_labeled_sm,patient_ID))
        continue
    end

    ep_struct_inds_sm = [ep_struct_inds_sm; kk];

    sm_ind = find(strcmp({EP.code},patient_ID));
    amps_full_sm = EP(sm_ind).amplitudesEMG;
    delays_full_sm = EP(sm_ind).latenciesEMG;

    labels_sm_temp = zeros(size(EP(sm_ind).latenciesEMG,2),length(emg_mapping_sm{kk}));
    amps_sm_temp = nan(size(EP(sm_ind).latenciesEMG,2),length(ep_struct(kk).mep.emg_labels));
    ampsp2p_sm_temp = nan(size(EP(sm_ind).latenciesEMG,2),length(ep_struct(kk).mep.emg_labels));
    delays_sm_temp = nan(size(EP(sm_ind).latenciesEMG,2),length(ep_struct(kk).mep.emg_labels));
    delays_sm_temp_all = cell(size(EP(sm_ind).latenciesEMG,2),length(ep_struct(kk).mep.emg_labels));

    for kl = 1:length(emg_mapping_sm{kk})
        emg_ind = kl;
        amps_full_temp = amps_full_sm(:,:,emg_ind);
        delays_full_temp = delays_full_sm(:,:,emg_ind);

        for km = 1:size(amps_full_temp,2)
            if all(isnan(amps_full_temp(:,km)))
                labels_sm_temp(km,kl) = 1;
            else
                [~,amp_ind] = max(abs(amps_full_temp(:,km)-amps_full_temp(1,km)));
                amps_sm_temp(km,kl) = amps_full_temp(amp_ind,km);
                delays_sm_temp(km,kl) = delays_full_temp(amp_ind,km);
                temp = ~isnan(delays_full_temp(:,km)); temp(1) = false;
                delays_sm_temp_all{km,kl} = delays_full_temp(temp,km);

                p2p_temp = diff(amps_full_temp(:,kl)-amps_full_temp(1,km));
                [~,p2p_ind] = max(p2p_temp);
                ampsp2p_sm_temp (km,kl) = p2p_temp(p2p_ind);
            end
        end
        
    end
    if strcmp(patient_ID, 'ephys025')
        labels_sm_temp(55:56,:) = [];
        amps_sm_temp(55:56,:) = [];
        ampsp2p_sm_temp(55:56,:) = [];
        delays_sm_temp(55:56,:) = [];
        delays_sm_temp_all(55:56,:) = [];
        if kk == 1
        amplitudes{kk}(55:56) = [];
        cathodes{kk}(55:56) = [];
        anodes{kk}(55:56) = [];
        end
    end
    mep_labels_sm = [mep_labels_sm; {~logical(labels_sm_temp)}];
    mep_amps_sm = [mep_amps_sm; {abs(amps_sm_temp)}];
    mep_ampsp2p_sm = [mep_ampsp2p_sm; {abs(ampsp2p_sm_temp)}];
    mep_delays_sm = [mep_delays_sm; {delays_sm_temp}];
    mep_delays_sm_all = [mep_delays_sm_all; {delays_sm_temp_all}];
end

% for kk = 1:length(ep_struct)
%     stim_reordered = EP_reordered.( ep_struct(kk).patient_ID);
%     stim_reordered = stim_reordered(~isnan(stim_reordered));
%     ep_struct(kk).mep.labels_detect = ep_struct(kk).mep.labels_detect(stim_reordered,:);
%     ep_struct(kk).mep.delays_detect = ep_struct(kk).mep.delays_detect(stim_reordered,:);
%     ep_struct(kk).mep.amps_detect = ep_struct(kk).mep.amps_detect(stim_reordered,:);
%     ep_struct(kk).stim_settings.param_strings = ep_struct(kk).stim_settings.param_strings(stim_reordered);
%     ep_struct(kk).mep.mep_means = ep_struct(kk).mep.mep_means(stim_reordered,:);
%     ep_struct(kk).mep.amps_detect_z = ep_struct(kk).mep.amps_detect_z(stim_reordered,:);
% end

for kk = 1:length(ep_struct)
    stim_reordered = EP_reordered.(ep_struct(kk).patient_ID);
    stim_reordered = stim_reordered(~isnan(stim_reordered));
    emg_reordered = emg_mapping_sm{kk};
  
    ep_struct(kk).stim_settings.param_strings = ep_struct(kk).stim_settings.param_strings(stim_reordered);
    
    ep_struct(kk).mep.raw.emg_labels = ep_struct(kk).mep.emg_labels(emg_reordered);
    ep_struct(kk).mep.raw.labels_detect = ep_struct(kk).mep.raw.labels_detect(stim_reordered,emg_reordered);
    ep_struct(kk).mep.raw.delays_detect = ep_struct(kk).mep.raw.delays_detect(stim_reordered,emg_reordered);
    ep_struct(kk).mep.raw.amps_detect = ep_struct(kk).mep.raw.amps_detect(stim_reordered,emg_reordered);
    ep_struct(kk).mep.raw.mep_means = ep_struct(kk).mep.raw.mep_means(stim_reordered,emg_reordered);
    ep_struct(kk).mep.raw.amps_detect_z = ep_struct(kk).mep.raw.amps_detect_z(stim_reordered,emg_reordered);
    
    ep_struct(kk).mep.art.emg_labels = ep_struct(kk).mep.emg_labels(emg_reordered);
    ep_struct(kk).mep.art.labels_detect = ep_struct(kk).mep.art.labels_detect(stim_reordered,emg_reordered);
    ep_struct(kk).mep.art.delays_detect = ep_struct(kk).mep.art.delays_detect(stim_reordered,emg_reordered);
    ep_struct(kk).mep.art.amps_detect = ep_struct(kk).mep.art.amps_detect(stim_reordered,emg_reordered);
    ep_struct(kk).mep.art.mep_means = ep_struct(kk).mep.art.mep_means(stim_reordered,emg_reordered);
    ep_struct(kk).mep.art.amps_detect_z = ep_struct(kk).mep.art.amps_detect_z(stim_reordered,emg_reordered);

    ep_struct(kk).dlep.raw_means = ep_struct(kk).dlep.raw_means(stim_reordered,:);
    ep_struct(kk).dlep.filt_means = ep_struct(kk).dlep.filt_means(stim_reordered,:);
    ep_struct(kk).dlep.stim_arts = ep_struct(kk).dlep.stim_arts(stim_reordered,:);
end

reorder_emg = cell(size(mep_labels_sm,2),1);

%% ex patient accuracy plot 
% pt_ind = 6;
% pt_acc = mean(ep_struct(pt_ind).mep.labels_detect == mep_labels_sm{pt_ind});
% pt_acc_mask = (ep_struct(pt_ind).mep.labels_detect == mep_labels_sm{pt_ind});
% 
% pt_ind_co = 12;
% pt_inds_co = [6,7,8,10,11,12,13];
% pt_acc_co = mean(ep_struct(pt_ind).mep.labels_detect == mep_labels_co(pt_ind_co).labels);
% 
% pt_accs = cell(size(emg_mapping_labels));
% pt_accs_co = [];

ampz_sweep = 0:.25:6;
acc_by_muscle = cell(size(emg_mapping_labels));
acc_sweep_all = cell(size(emg_mapping_labels));
acc_sweep_by_pt = cell(size(emg_mapping_sm));
acc_by_pt = cell(size(emg_mapping_sm));


for kk = 1:length(emg_mapping_sm)
%     pt_accs = [pt_accs; mean(ep_struct(kk).mep.labels_detect == mep_labels_sm{kk})];
%     pt_accs_co = [pt_accs_co; mean(ep_struct(pt_ind).mep.labels_detect == mep_labels_co(pt_inds_co(kk)).labels)];
%     
    tempacc = zeros(length(emg_mapping_sm{kk}),length(ampz_sweep));
    for kl = 1:length(ampz_sweep)
        if iscell(ep_struct(kk).mep.raw.amps_detect_z)
            tempmat = cellfun(@nanmax, ep_struct(kk).mep.raw.amps_detect_z, 'UniformOutput', false);
            tempmat(cellfun(@isempty,tempmat)) = {0};
            temp_detect = cell2mat(tempmat)>ampz_sweep(kl);
        else
            temp_detect = ep_struct(kk).mep.raw.amps_detect_z>ampz_sweep(kl);
        end
        tempacc(:,kl) = mean(temp_detect == mep_labels_sm{kk});
        %disp(mean(temp_detect == mep_labels_sm{kk}))
        
%         if ampz_sweep(kl)==2
%             acc_sweep_by_pt{kk} = (temp_detect == mep_labels_sm{kk});
%         end
    end
    for km = 1:length(emg_mapping_sm{kk})
        acc_by_muscle{emg_mapping_all{kk}(km)} = [acc_by_muscle{emg_mapping_all{kk}(km)};  mean(ep_struct(kk).mep.raw.labels_detect(:,km)==mep_labels_sm{kk}(:,km))];
    end
    %acc_all = cat(3,acc_sweep, tempmat);
    acc_sweep_by_pt{kk} = tempacc;
    
    acc_by_pt{kk} = mean(ep_struct(kk).mep.raw.labels_detect == mep_labels_sm{kk});

    %pt_accs{emg_mapping_all{kk}(km)} = [pt_accs{emg_mapping_all{kk}(km)}; mean(ep_struct(kk).mep.labels_detect == mep_labels_sm{kk})];
end
%acc_sweep = mean(acc_all,3);

muscles_to_plot = 1:6;

figure
hold on
for kk = muscles_to_plot
    plot(ampz_sweep,mean(acc_by_muscle{kk},1),'Linewidth',6)
end
title('mEP Detection: Threshold Sweep')
ylabel('Accuracy')
ylim([0.6,1])
xlabel('SD threshold')
legend(emg_mapping_labels(muscles_to_plot),'Location','Southeast')

DD = acc_by_muscle;
idx.size = cellfun(@length,DD);
idx.padded = max(idx.size)-idx.size;
DDpadded = cellfun(@(x,y) [x;nan(y,1)],DD,num2cell(idx.padded),'uni',0);
DD_matrix = cell2mat(DDpadded);

figure
violinplot(DD_matrix, emg_mapping_labels)
title('mEP detection accuracy vs. muscle - all test patients')
set(gca,'XtickLabel',emg_mapping_labels)
ylim([0.4,1])

is_facial = [5,6,7,8,11,12,13];
is_limb = [1,2,3,4,9,10];
q1 =DD(is_facial); q2 = DD(is_limb);
acc_grouped = {cell2mat(DD(:)),cell2mat(q1(:)),cell2mat(q2(:))};

DD = acc_grouped;
idx.size = cellfun(@length,DD);
idx.padded = max(idx.size)-idx.size;
DDpadded = cellfun(@(x,y) [x;nan(y,1)],DD,num2cell(idx.padded),'uni',0);
DD_matrix = cell2mat(DDpadded);


figure
hold on
cols = {[0.4,0,0.5];[0.6, 0.2, 0]; [0, 0.5, 0.5]};
labels = {'All','Facial','Limb'};
for kk = 1:length(labels)
    b = boxchart(kk*ones(size(DD_matrix(:,kk))),DD_matrix(:,kk),'BoxFaceColor',cols{kk},'MarkerColor',cols{kk});
end
xticks([1 2 3])
xticklabels(labels)
ylim([0.3 1])
yline(0.5,'k--')
ylabel('Accuracy')
set(gca,'FontSize',16)

%% same thing for artifact-based rejection
% pt_ind = 6;
% pt_acc = mean(ep_struct(pt_ind).mep.labels_detect == mep_labels_sm{pt_ind});
% pt_acc_mask = (ep_struct(pt_ind).mep.labels_detect == mep_labels_sm{pt_ind});
% 
% pt_ind_co = 12;
% pt_inds_co = [6,7,8,10,11,12,13];
% pt_acc_co = mean(ep_struct(pt_ind).mep.labels_detect == mep_labels_co(pt_ind_co).labels);
% 
% pt_accs = cell(size(emg_mapping_labels));
% pt_accs_co = [];

ampz_sweep = 0:.25:6;
acc_by_muscle = cell(size(emg_mapping_labels));
acc_sweep_all = cell(size(emg_mapping_labels));
acc_sweep_by_pt = cell(size(emg_mapping_sm));
acc_by_pt = cell(size(emg_mapping_sm));


for kk = 1:length(emg_mapping_sm)
%     pt_accs = [pt_accs; mean(ep_struct(kk).mep.labels_detect == mep_labels_sm{kk})];
%     pt_accs_co = [pt_accs_co; mean(ep_struct(pt_ind).mep.labels_detect == mep_labels_co(pt_inds_co(kk)).labels)];
%     
    tempacc = zeros(length(emg_mapping_sm{kk}),length(ampz_sweep));
    for kl = 1:length(ampz_sweep)
        if iscell(ep_struct(kk).mep.art.amps_detect_z)
            tempmat = cellfun(@nanmax, ep_struct(kk).mep.art.amps_detect_z, 'UniformOutput', false);
            tempmat(cellfun(@isempty,tempmat)) = {0};
            temp_detect = cell2mat(tempmat)>ampz_sweep(kl);
        else
            temp_detect = ep_struct(kk).mep.art.amps_detect_z>ampz_sweep(kl);
        end
        tempacc(:,kl) = mean(temp_detect == mep_labels_sm{kk});
        %disp(mean(temp_detect == mep_labels_sm{kk}))
        
%         if ampz_sweep(kl)==2
%             acc_sweep_by_pt{kk} = (temp_detect == mep_labels_sm{kk});
%         end
    end
    for km = 1:length(emg_mapping_sm{kk})
        acc_by_muscle{emg_mapping_all{kk}(km)} = [acc_by_muscle{emg_mapping_all{kk}(km)};  mean(ep_struct(kk).mep.art.labels_detect(:,km)==mep_labels_sm{kk}(:,km))];
    end
    %acc_all = cat(3,acc_sweep, tempmat);
    acc_sweep_by_pt{kk} = tempacc;
    
    acc_by_pt{kk} = mean(ep_struct(kk).mep.art.labels_detect == mep_labels_sm{kk});

    %pt_accs{emg_mapping_all{kk}(km)} = [pt_accs{emg_mapping_all{kk}(km)}; mean(ep_struct(kk).mep.labels_detect == mep_labels_sm{kk})];
end
%acc_sweep = mean(acc_all,3);

muscles_to_plot = 7:10;

figure
hold on
for kk = muscles_to_plot
    plot(ampz_sweep,mean(acc_by_muscle{kk},1),'Linewidth',6)
end
title('mEP Detection: Threshold Sweep')
ylabel('Accuracy')
ylim([0.6,1])
xlabel('SD threshold')
legend(emg_mapping_labels(muscles_to_plot),'Location','Southeast')

DD = acc_by_muscle;
idx.size = cellfun(@length,DD);
idx.padded = max(idx.size)-idx.size;
DDpadded = cellfun(@(x,y) [x;nan(y,1)],DD,num2cell(idx.padded),'uni',0);
DD_matrix = cell2mat(DDpadded);

figure
violinplot(DD_matrix, emg_mapping_labels)
title('mEP detection accuracy vs. muscle - all test patients')
set(gca,'XtickLabel',emg_mapping_labels)
ylim([0.4,1])

is_facial = [5,6,7,8,11,12,13];
is_limb = [1,2,3,4,9,10];
q1 =DD(is_facial); q2 = DD(is_limb);
acc_grouped = {cell2mat(DD(:)),cell2mat(q1(:)),cell2mat(q2(:))};

DD = acc_grouped;
idx.size = cellfun(@length,DD);
idx.padded = max(idx.size)-idx.size;
DDpadded = cellfun(@(x,y) [x;nan(y,1)],DD,num2cell(idx.padded),'uni',0);
DD_matrix = cell2mat(DDpadded);

figure
hold on
cols = {[0.4,0,0.5];[0.6, 0.2, 0]; [0, 0.5, 0.5]};
labels = {'All','Facial','Limb'};
for kk = 1:length(labels)
    b = boxchart(kk*ones(size(DD_matrix(:,kk))),DD_matrix(:,kk),'BoxFaceColor',cols{kk},'MarkerColor',cols{kk});
end
xticks([1 2 3])
xticklabels(labels)
ylim([0.3 1])
yline(0.5,'k--')
ylabel('Accuracy')
set(gca,'FontSize',16)

%% get accuracy for single set of settings

offset_y = 50; offset_x = 110; x_plot = linspace(1,100,2200); 
base_length = 220;
sd_thresh = 8;

show_text = true;

filt_hp = false;
filt_lp = false;
rem_ringing_art = false;
filt_sg = false;
filt_tdnotch = false;

acc_by_muscle = cell(size(emg_mapping_labels));
prec_by_muscle = cell(size(emg_mapping_labels));
rec_by_muscle = cell(size(emg_mapping_labels));
f1_by_muscle = cell(size(emg_mapping_labels));

for pt_ind = 1:length(ep_struct)
    for kp = 1:length(emg_mapping_all{pt_ind})
        n_trials = length(ep_struct(pt_ind).stim_settings.param_strings);
        detected_temp = zeros(n_trials,1);
        ltc_to_plot = latencies(emg_mapping_all{pt_ind}(kp),:) + [-latency_tolerance, latency_tolerance];
        
        for ko = 1:n_trials
            temptrace = double(ep_struct(pt_ind).mep.art.mep_means{ko,kp});
            if isempty(temptrace)
                continue
            end
            if filt_sg
                freq=150;
                order=2;
                
                %framelen=round(1/freq*fs);
                framelen = 25;
                if mod(framelen,2)==0
                    framelen=framelen+1;
                end
                temptrace = sgolayfilt(temptrace,order,framelen);
                
            end
            if rem_ringing_art
                [temptrace, artifact_fit] = ep_remove_ringing_artifact_erc((temptrace), [.005 .04], fs);
            end
            if filt_hp
                temptrace = filtfilt(b_high, a_high, temptrace);
            end
            if filt_lp
                temptrace = filtfilt(b_low, a_low, temptrace);
            end
            
            baseline = median((temptrace(end-base_length:end)));
            sd = std(temptrace(end-base_length:end));
            temptrace = (temptrace -baseline)/sd;
            latency_pts = round(ltc_to_plot/1000*fs);
            
            [pkval, loc, widths, prom] = findpeaks(abs(temptrace(latency_pts(1):latency_pts(2))),'MinPeakHeight',sd_thresh,'MaxPeakWidth',fs*0.015,'MinPeakWidth',fs*0.0015,'MinPeakProminence',sd_thresh);
            
            %         delay_temp = ep_struct(pt_ind).mep.delays_detect{ko,kp};
            %         amps_temp = ep_struct(pt_ind).mep.amps_detect_z{ko,kp};
            amps_temp = nan(size(pkval));
            delays_temp = nan(size(pkval));
            amps_z_temp = nan(size(pkval));
            
            if ~isempty(pkval)
                detected = true;
                p_widths{ko,kp} = widths;
                p_prominences{ko,kp} = prom;
                for kl = 1:length(pkval)
                    amps_temp(kl) = pkval(kl);
                    delays_temp(kl) = x_plot(loc(kl))+ltc_to_plot(1);
                    amps_z_temp(kl) =  amps_temp(kl);
                end
                p_locs{ko,kp} = delays_temp;
                p_amps_z{ko,kp} = amps_z_temp;
            else
                detected = false;
            end
            detected_temp(ko) = detected;
            
%             if detected && (mep_labels_sm{pt_ind}(ko,kp))
%                 plot(x_plot+kp*offset_x,temptrace+ko*offset_y,col_code{1})
%                 pred_type(ko) = 1;
%             elseif detected && ~(mep_labels_sm{pt_ind}(ko,kp)) %false positive; red
%                 plot(x_plot+kp*offset_x,temptrace+ko*offset_y,col_code{2})
%                 pred_type(ko) = 2;
%             elseif ~detected && (mep_labels_sm{pt_ind}(ko,kp)) %false negative; blue
%                 plot(x_plot+kp*offset_x,temptrace+ko*offset_y,col_code{3})
%                 pred_type(ko) = 3;
%             else
%                 plot(x_plot+kp*offset_x,temptrace+ko*offset_y,col_code{4})
%                 pred_type(ko) = 4;
%             end
%             if ~isempty(delays_temp) && show_marks
%                 for kq = 1:length(delays_temp)
%                     delay_ind = find(x_plot>delays_temp(kq),1);
%                     plot(x_plot(delay_ind) +kp*offset_x, temptrace(delay_ind) + ko*offset_y, 'k*', 'MarkerSize', 20);
%                 end
%             end
%             if show_thresh
%                 plot([x_plot(1), x_plot(end)]+kp*offset_x,[-thresh_to_plot,-thresh_to_plot ]+ko*offset_y,'k--')
%                 plot([x_plot(1), x_plot(end)]+kp*offset_x,[thresh_to_plot,thresh_to_plot ]+ko*offset_y,'k--')
%             end

        end
        acc_by_muscle{emg_mapping_all{pt_ind}(kp)} = [acc_by_muscle{emg_mapping_all{pt_ind}(kp)};  mean(detected_temp == mep_labels_sm{pt_ind}(:,kp))];
        cmat = confusionmat(logical(detected_temp),mep_labels_sm{pt_ind}(:,kp));
        if (size(cmat,1) == 1) && (mean(detected_temp)==0)
            cmat = [cmat 0; 0 0];
        elseif (size(cmat,1) == 1) && (mean(detected_temp)==1)
            cmat = [0 0; 0 cmat];
        end
        
        precision = cmat(2,2) ./ (cmat(2,2)+cmat(2,1));
        recall = cmat(2,2) ./ (cmat(2,2)+cmat(1,2));
        
        prec_by_muscle{emg_mapping_all{pt_ind}(kp)} = [prec_by_muscle{emg_mapping_all{pt_ind}(kp)}; precision];
        rec_by_muscle{emg_mapping_all{pt_ind}(kp)} = [rec_by_muscle{emg_mapping_all{pt_ind}(kp)}; recall];
        
        f1 = 2*(precision.*recall)/(precision+recall);
        f1_by_muscle{emg_mapping_all{pt_ind}(kp)} = [f1_by_muscle{emg_mapping_all{pt_ind}(kp)}; f1];
%         if show_thresh
%             ltc_to_plot = latencies(emg_mapping_all{pt_ind}(kp),:);
%             %         plot([x_plot(1), x_plot(end)]+kp*offset_x,[mean(temptrace) - thresh_to_plot,mean(temptrace) - thresh_to_plot ]+ko*offset_y,'k--')
%             %         plot([x_plot(1), x_plot(end)]+kp*offset_x,[mean(temptrace) + thresh_to_plot,mean(temptrace) + thresh_to_plot ]+ko*offset_y,'k--')
%             xline(kp*offset_x + ltc_to_plot(1) - latency_tolerance, 'k--'); xline(kp*offset_x + ltc_to_plot(2) + latency_tolerance, 'k--');
%             st_to_print{kp} = sprintf('Accuracy for %s: %.3f           Latency: %.3f - %.3f ms',ep_struct(pt_ind).mep.emg_labels{kp},mean(detected_temp == mep_labels_sm{pt_ind}(:,kp)), ltc_to_plot(1)-latency_tolerance, ltc_to_plot(2)+latency_tolerance);
%         else
%             fprintf('Accuracy for %s: %.3f\n',ep_struct(pt_ind).mep.emg_labels{kp},acc_by_pt{pt_ind}(kp))
%         end
        
    end
    
end

plot_text = true;

DD = acc_by_muscle;
is_facial = [5,6,7,8,11,12,13];
is_limb = [1,2,3,4,9,10];
q1 =DD(is_facial); q2 = DD(is_limb);
acc_grouped = {cell2mat(DD(:)),cell2mat(q1(:)),cell2mat(q2(:))};

DD = acc_grouped;
idx.size = cellfun(@length,DD);
idx.padded = max(idx.size)-idx.size;
DDpadded = cellfun(@(x,y) [x;nan(y,1)],DD,num2cell(idx.padded),'uni',0);
DD_matrix = cell2mat(DDpadded);
accvals = nanmedian(DD_matrix);

ylims = [0 1.1];

figure
cols = {[0.4,0,0.5];[0.6, 0.2, 0]; [0, 0.5, 0.5]};
labels = {'All','Facial','Limb'};
subplot(2,2,1)
hold on
for kk = 1:length(labels)
    b = boxchart(kk*ones(size(DD_matrix(:,kk))),DD_matrix(:,kk),'BoxFaceColor',cols{kk},'MarkerColor',cols{kk});
    if show_text
        text(kk,1.05,sprintf('%.3f',accvals(kk)),'HorizontalAlignment','center','FontSize',16)
    end
end
xticks([1 2 3])
xticklabels(labels)
ylim(ylims)
yline(0.5,'k--')
title('Accuracy')
set(gca,'FontSize',16)

DD = prec_by_muscle;
is_facial = [5,6,7,8,11,12,13];
is_limb = [1,2,3,4,9,10];
q1 =DD(is_facial); q2 = DD(is_limb);
acc_grouped = {cell2mat(DD(:)),cell2mat(q1(:)),cell2mat(q2(:))};

DD = acc_grouped;
idx.size = cellfun(@length,DD);
idx.padded = max(idx.size)-idx.size;
DDpadded = cellfun(@(x,y) [x;nan(y,1)],DD,num2cell(idx.padded),'uni',0);
DD_matrix = cell2mat(DDpadded);
accvals = nanmedian(DD_matrix);

subplot(2,2,2)
hold on
for kk = 1:length(labels)
    b = boxchart(kk*ones(size(DD_matrix(:,kk))),DD_matrix(:,kk),'BoxFaceColor',cols{kk},'MarkerColor',cols{kk});
    if show_text
        text(kk,1.05,sprintf('%.3f',accvals(kk)),'HorizontalAlignment','center','FontSize',16)
    end
end
xticks([1 2 3])
xticklabels(labels)
ylim(ylims)
yline(0.5,'k--')
title('Precision')
set(gca,'FontSize',16)

DD = rec_by_muscle;
is_facial = [5,6,7,8,11,12,13];
is_limb = [1,2,3,4,9,10];
q1 =DD(is_facial); q2 = DD(is_limb);
acc_grouped = {cell2mat(DD(:)),cell2mat(q1(:)),cell2mat(q2(:))};

DD = acc_grouped;
idx.size = cellfun(@length,DD);
idx.padded = max(idx.size)-idx.size;
DDpadded = cellfun(@(x,y) [x;nan(y,1)],DD,num2cell(idx.padded),'uni',0);
DD_matrix = cell2mat(DDpadded);
accvals = nanmedian(DD_matrix);

subplot(2,2,3)
hold on
for kk = 1:length(labels)
    b = boxchart(kk*ones(size(DD_matrix(:,kk))),DD_matrix(:,kk),'BoxFaceColor',cols{kk},'MarkerColor',cols{kk});
    if show_text
        text(kk,1.05,sprintf('%.3f',accvals(kk)),'HorizontalAlignment','center','FontSize',16)
    end
end
xticks([1 2 3])
xticklabels(labels)
ylim(ylims)
yline(0.5,'k--')
title('Recall')
set(gca,'FontSize',16)

DD = f1_by_muscle;
is_facial = [5,6,7,8,11,12,13];
is_limb = [1,2,3,4,9,10];
q1 =DD(is_facial); q2 = DD(is_limb);
acc_grouped = {cell2mat(DD(:)),cell2mat(q1(:)),cell2mat(q2(:))};

DD = acc_grouped;
idx.size = cellfun(@length,DD);
idx.padded = max(idx.size)-idx.size;
DDpadded = cellfun(@(x,y) [x;nan(y,1)],DD,num2cell(idx.padded),'uni',0);
DD_matrix = cell2mat(DDpadded);
accvals = nanmedian(DD_matrix);

subplot(2,2,4)
hold on
for kk = 1:length(labels)
    b = boxchart(kk*ones(size(DD_matrix(:,kk))),DD_matrix(:,kk),'BoxFaceColor',cols{kk},'MarkerColor',cols{kk});
    if show_text
        text(kk,1.05,sprintf('%.3f',accvals(kk)),'HorizontalAlignment','center','FontSize',16)
    end
end
xticks([1 2 3])
xticklabels(labels)
ylim(ylims)
yline(0.5,'k--')
title('F1 Score')
set(gca,'FontSize',16)



%% plot curve of accuracy metrics vs. threshold sweep
amp_sweep = 0:0.5:15;
tt = linspace(0,0.1,2200);

rem_art_pca = false;
use_tdnotch = false;
filt_sg = false;
rem_ringing_art = false;
filt_hp = false;
filt_lp = false;

mode = 'art';

mep_settings = struct();
mep_settings.art_window = [1,20];
mep_settings.art_detect = [3,6]; %window to check whether to apply art correction
mep_settings.art_thresh = 3; 
mep_settings.sd_thresh = 3;
mep_settings.fs = 22000;
mep_settings.base_length = 10;   %round(10*mep_settings.fs/1000);
mep_settings.pctl_thresh = 50;
mep_settings.use_dbs = true;
mep_settings.notch_filt_emg = true;
mep_settings.art_type = 'emg';

acc_ampsweep = cell(length(amp_sweep),3);
prec_ampsweep = cell(length(amp_sweep),3);
rec_ampsweep = cell(length(amp_sweep),3);
f1_ampsweep = cell(length(amp_sweep),3);

for ampind = 1:length(amp_sweep)
    sd_thresh = amp_sweep(ampind);
    
    acc_by_muscle = cell(size(emg_mapping_labels));
    prec_by_muscle = cell(size(emg_mapping_labels));
    rec_by_muscle = cell(size(emg_mapping_labels));
    f1_by_muscle = cell(size(emg_mapping_labels));
    
    for pt_ind = 1:length(ep_struct)
        for kp = 1:length(emg_mapping_all{pt_ind})
            n_trials = length(ep_struct(pt_ind).stim_settings.param_strings);
            detected_temp = zeros(n_trials,1);
            ltc_to_plot = latencies(emg_mapping_all{pt_ind}(kp),:) + [-latency_tolerance, latency_tolerance];
            
            for ko = 1:n_trials
                temptrace = double(ep_struct(pt_ind).mep.(mode).mep_means{ko,kp});
                if isempty(temptrace)
                    continue
                end
                if filt_sg
                    freq=150;
                    order=2;
                    
                    %framelen=round(1/freq*fs);
                    framelen = 25;
                    if mod(framelen,2)==0
                        framelen=framelen+1;
                    end
                    temptrace = sgolayfilt(temptrace,order,framelen);
                    
                end
                if rem_ringing_art
                    [temptrace, artifact_fit] = ep_remove_ringing_artifact_erc((temptrace), [.005 .04], fs);
                end
                if filt_hp
                    temptrace = filtfilt(b_high, a_high, temptrace);
                end
                if filt_lp
                    temptrace = filtfilt(b_low, a_low, temptrace);
                end

                if use_tdnotch
                    %temptrace = tdnotch(temptrace);
                    [temptrace, yest, A, phi] = td_notch(temptrace,tt,60,fs);
                end

                if rem_art_pca
                    mep_means = ep_struct(pt_ind).mep.raw.mep_means(ko,:)';
                    %dlep_means =  ep_struct(pt_ind).dlep.dlep_means(ko,:)';
                    latencies_pca = latencies(emg_mapping_all{pt_ind},:) + [-latency_tolerance, latency_tolerance];
                    [detected, amps, delays, amps_z, corr_traces, templates] = detect_mep_rejpca(mep_means, [], latencies_pca, mep_settings);
                else
                    baseline = median((temptrace(end-base_length:end)));
                    sd = std(temptrace(end-base_length:end));
                    temptrace = (temptrace -baseline)/sd;
                    latency_pts = round(ltc_to_plot/1000*fs);
                end
%                 
%                 baseline = median((temptrace(end-base_length:end)));
%                 sd = std(temptrace(end-base_length:end));
%                 temptrace = (temptrace -baseline)/sd;
%                 latency_pts = round(ltc_to_plot/1000*fs);
                
                [pkval, loc, widths, prom] = findpeaks(abs(temptrace(latency_pts(1):latency_pts(2))),'MinPeakHeight',sd_thresh,'MaxPeakWidth',fs*0.015,'MinPeakWidth',fs*0.0015,'MinPeakProminence',sd_thresh);
                
                %         delay_temp = ep_struct(pt_ind).mep.delays_detect{ko,kp};
                %         amps_temp = ep_struct(pt_ind).mep.amps_detect_z{ko,kp};
                amps_temp = nan(size(pkval));
                delays_temp = nan(size(pkval));
                amps_z_temp = nan(size(pkval));
                
                if ~isempty(pkval)
                    detected = true;
                    p_widths{ko,kp} = widths;
                    p_prominences{ko,kp} = prom;
                    for kl = 1:length(pkval)
                        amps_temp(kl) = pkval(kl);
                        delays_temp(kl) = x_plot(loc(kl))+ltc_to_plot(1);
                        amps_z_temp(kl) =  amps_temp(kl);
                    end
                    p_locs{ko,kp} = delays_temp;
                    p_amps_z{ko,kp} = amps_z_temp;
                else
                    detected = false;
                end
                detected_temp(ko) = detected;
                
                %             if detected && (mep_labels_sm{pt_ind}(ko,kp))
                %                 plot(x_plot+kp*offset_x,temptrace+ko*offset_y,col_code{1})
                %                 pred_type(ko) = 1;
                %             elseif detected && ~(mep_labels_sm{pt_ind}(ko,kp)) %false positive; red
                %                 plot(x_plot+kp*offset_x,temptrace+ko*offset_y,col_code{2})
                %                 pred_type(ko) = 2;
                %             elseif ~detected && (mep_labels_sm{pt_ind}(ko,kp)) %false negative; blue
                %                 plot(x_plot+kp*offset_x,temptrace+ko*offset_y,col_code{3})
                %                 pred_type(ko) = 3;
                %             else
                %                 plot(x_plot+kp*offset_x,temptrace+ko*offset_y,col_code{4})
                %                 pred_type(ko) = 4;
                %             end
                %             if ~isempty(delays_temp) && show_marks
                %                 for kq = 1:length(delays_temp)
                %                     delay_ind = find(x_plot>delays_temp(kq),1);
                %                     plot(x_plot(delay_ind) +kp*offset_x, temptrace(delay_ind) + ko*offset_y, 'k*', 'MarkerSize', 20);
                %                 end
                %             end
                %             if show_thresh
                %                 plot([x_plot(1), x_plot(end)]+kp*offset_x,[-thresh_to_plot,-thresh_to_plot ]+ko*offset_y,'k--')
                %                 plot([x_plot(1), x_plot(end)]+kp*offset_x,[thresh_to_plot,thresh_to_plot ]+ko*offset_y,'k--')
                %             end
                
            end
            acc_by_muscle{emg_mapping_all{pt_ind}(kp)} = [acc_by_muscle{emg_mapping_all{pt_ind}(kp)};  mean(detected_temp == mep_labels_sm{pt_ind}(:,kp))];
            acctemp = mean(detected_temp == mep_labels_sm{pt_ind}(:,kp));
            cmat = confusionmat(logical(detected_temp),mep_labels_sm{pt_ind}(:,kp));
            if (size(cmat,1) == 1) && (mean(detected_temp)==0)
                cmat = [cmat 0; 0 0];
            elseif (size(cmat,1) == 1) && (mean(detected_temp)==1)
                cmat = [0 0; 0 cmat];
            end
            
            precision = cmat(2,2) ./ (cmat(2,2)+cmat(2,1));
            recall = cmat(2,2) ./ (cmat(2,2)+cmat(1,2));
            
            prec_by_muscle{emg_mapping_all{pt_ind}(kp)} = [prec_by_muscle{emg_mapping_all{pt_ind}(kp)}; precision];
            rec_by_muscle{emg_mapping_all{pt_ind}(kp)} = [rec_by_muscle{emg_mapping_all{pt_ind}(kp)}; recall];
            
            f1 = 2*(precision.*recall)/(precision+recall);
%             if isnan(f1) && (mean(mep_labels_sm{pt_ind}(:,kp)) == 0)
%                 f1 = acctemp;
%             elseif isnan(f1) && ((precision == 0) && (recall == 0))
%                 f1 = 0;
%             end
            if isnan(f1) && ((precision == 0) && (recall == 0))
                f1 = 0;
            end


            f1_by_muscle{emg_mapping_all{pt_ind}(kp)} = [f1_by_muscle{emg_mapping_all{pt_ind}(kp)}; f1];
            %         if show_thresh
            %             ltc_to_plot = latencies(emg_mapping_all{pt_ind}(kp),:);
            %             %         plot([x_plot(1), x_plot(end)]+kp*offset_x,[mean(temptrace) - thresh_to_plot,mean(temptrace) - thresh_to_plot ]+ko*offset_y,'k--')
            %             %         plot([x_plot(1), x_plot(end)]+kp*offset_x,[mean(temptrace) + thresh_to_plot,mean(temptrace) + thresh_to_plot ]+ko*offset_y,'k--')
            %             xline(kp*offset_x + ltc_to_plot(1) - latency_tolerance, 'k--'); xline(kp*offset_x + ltc_to_plot(2) + latency_tolerance, 'k--');
            %             st_to_print{kp} = sprintf('Accuracy for %s: %.3f           Latency: %.3f - %.3f ms',ep_struct(pt_ind).mep.emg_labels{kp},mean(detected_temp == mep_labels_sm{pt_ind}(:,kp)), ltc_to_plot(1)-latency_tolerance, ltc_to_plot(2)+latency_tolerance);
            %         else
            %             fprintf('Accuracy for %s: %.3f\n',ep_struct(pt_ind).mep.emg_labels{kp},acc_by_pt{pt_ind}(kp))
            %         end
            
        end
         
    end
    DD = acc_by_muscle;
    is_facial = [5,6,7,8,11,12,13];
    is_limb = [1,2,3,4,9,10];
    q1 =DD(is_facial); q2 = DD(is_limb);
    acc_ampsweep(ampind,:) = {cell2mat(DD(:)),cell2mat(q1(:)),cell2mat(q2(:))};
    
    DD = prec_by_muscle;
    is_facial = [5,6,7,8,11,12,13];
    is_limb = [1,2,3,4,9,10];
    q1 =DD(is_facial); q2 = DD(is_limb);
    prec_ampsweep(ampind,:) = {cell2mat(DD(:)),cell2mat(q1(:)),cell2mat(q2(:))};
    
    DD = rec_by_muscle;
    is_facial = [5,6,7,8,11,12,13];
    is_limb = [1,2,3,4,9,10];
    q1 =DD(is_facial); q2 = DD(is_limb);
    rec_ampsweep(ampind,:) = {cell2mat(DD(:)),cell2mat(q1(:)),cell2mat(q2(:))};
    
    DD = f1_by_muscle;
    is_facial = [5,6,7,8,11,12,13];
    is_limb = [1,2,3,4,9,10];
    q1 =DD(is_facial); q2 = DD(is_limb);
    f1_ampsweep(ampind,:) = {cell2mat(DD(:)),cell2mat(q1(:)),cell2mat(q2(:))};
    
end

disp('Done')

%%

acc_ampsweep_med = cellfun(@nanmean,acc_ampsweep);
rec_ampsweep_med = cellfun(@nanmean,rec_ampsweep);
prec_ampsweep_med = cellfun(@nanmean,prec_ampsweep);
f1_ampsweep_med = cellfun(@nanmean,f1_ampsweep);

% acc_ampsweep_med = cellfun(@(x) prctile(x, 10),acc_ampsweep);
% rec_ampsweep_med = cellfun(@(x) prctile(x, 10),rec_ampsweep);
% prec_ampsweep_med = cellfun(@(x) prctile(x, 10),prec_ampsweep);
% f1_ampsweep_med = cellfun(@(x) prctile(x, 10),f1_ampsweep);

sem = @(x) (std(x)./sqrt(length(x)));
acc_ampsweep_sem = cellfun(sem,acc_ampsweep);
rec_ampsweep_sem = cellfun(sem,rec_ampsweep);
prec_ampsweep_sem = cellfun(sem,prec_ampsweep);
f1_ampsweep_sem = cellfun(sem,f1_ampsweep);


figure
subplot(2,2,1)
hold on
plot(amp_sweep,acc_ampsweep_med(:,1),'Color',cols{1},'LineWidth',1)
plot(amp_sweep,acc_ampsweep_med(:,2),'Color',cols{2},'LineWidth',1)
plot(amp_sweep,acc_ampsweep_med(:,3),'Color',cols{3},'LineWidth',1)
ylim([0 1.05])
%title(sprintf('Accuracy: %s', mode))
title('Recall')
xlabel('Threshold (z-score)')
legend(labels,'Location','Southeast')

subplot(2,2,2)
hold on
plot(amp_sweep,prec_ampsweep_med(:,1),'Color',cols{1},'LineWidth',1)
plot(amp_sweep,prec_ampsweep_med(:,2),'Color',cols{2},'LineWidth',1)
plot(amp_sweep,prec_ampsweep_med(:,3),'Color',cols{3},'LineWidth',1)
%title(sprintf('Precision: %s', mode))
title('Precision')
xlabel('Threshold (z-score)')
ylim([0 1.05])

subplot(2,2,3)
hold on
plot(amp_sweep,rec_ampsweep_med(:,1),'Color',cols{1},'LineWidth',1)
plot(amp_sweep,rec_ampsweep_med(:,2),'Color',cols{2},'LineWidth',1)
plot(amp_sweep,rec_ampsweep_med(:,3),'Color',cols{3},'LineWidth',1)
%title(sprintf('Recall: %s',mode))
title('Recall')
xlabel('Threshold (z-score)')
ylim([0 1.05])

subplot(2,2,4)
hold on
plot(amp_sweep,f1_ampsweep_med(:,1),'Color',cols{1},'LineWidth',1)
plot(amp_sweep,f1_ampsweep_med(:,2),'Color',cols{2},'LineWidth',1)
plot(amp_sweep,f1_ampsweep_med(:,3),'Color',cols{3},'LineWidth',1)
%title(sprintf('F1: %s', mode))
title('F1')
xlabel('Threshold (z-score)')
ylim([0 1.05])

sgtitle('Time-domain notch filtered')

fprintf('\n')
for kk = 1:3
[~, maxind] = max(f1_ampsweep_med(:,kk));
fprintf('%s: max F1 = %.3f, threshold = %.2f\n', labels{kk}, max(f1_ampsweep_med(:,kk)), amp_sweep(maxind));
end
fprintf('\n')

%%
pt_ind = 6;

pt_amps_cat = cell(0,1);
pt_delays_cat = cell(0,1);
pt_amps_detect = (ep_struct(pt_ind).mep.amps_detect);
pt_amps_sm = (mep_amps_sm{pt_ind});
pt_delays_detect = (ep_struct(pt_ind).mep.delays_detect);
pt_delays_sm = (mep_delays_sm{pt_ind});

vplot_x = {};
counter = 1;
for kp = 1:length(ep_struct(pt_ind).mep.emg_labels)

    pt_amps_cat = [pt_amps_cat; {pt_amps_detect(logical(ep_struct(pt_ind).mep.labels_detect(:,kp)),kp)}];
    pt_amps_cat = [pt_amps_cat; {pt_amps_sm(~isnan(pt_amps_sm(:,kp)),kp)}; {nan}];

    pt_delays_cat = [pt_delays_cat; {pt_delays_detect(logical(ep_struct(pt_ind).mep.labels_detect(:,kp)),kp)}];
    pt_delays_cat = [pt_delays_cat; {pt_delays_sm(~isnan(pt_delays_sm(:,kp)),kp)}; {nan}];

    vplot_x = [vplot_x; {ep_struct(pt_ind).mep.emg_labels{kp}}; {[ep_struct(pt_ind).mep.emg_labels{kp} '-SM']}; {'-'}];
    counter = counter + 3;
end

pt_delays_vplot = (padcat(pt_delays_cat{:}));
pt_amps_vplot =(padcat(pt_amps_cat{:}));
 

figure
bar(pt_acc)
set(gca,'XtickLabel',ep_struct(pt_ind).mep.emg_labels)
title('Accuracy vs. muscle')
suptitle(sprintf('mEP detection: %s', ep_struct(pt_ind).patient_ID))

figure
violinplot(pt_delays_vplot, vplot_x)
title('Delays')

figure
violinplot(pt_amps_vplot, vplot_x)
title('Amps')

%% plot raw traces colorized by detection overlap
pt_ind =6;
use_thresh = false;
show_marks = false;
show_sm_marks = true;
show_thresh = true; thresh_to_plot = 3;

figure
hold on
col_code = {'g','r','b','k'};
offset_y = 50; offset_x = 110; x_plot = linspace(1,100,2200); 
base_length = 220;

fprintf('Patient: %s\n',emg_mapping_pts{pt_ind})

xtick_pos = (1:offset_x:offset_x*length(ep_struct(pt_ind).mep.emg_labels))+offset_x;
for kp = 1:length(ep_struct(pt_ind).mep.emg_labels)
    for ko = 1:size(ep_struct(pt_ind).mep.raw.labels_detect,1)
        
        temptrace = ep_struct(pt_ind).mep.raw.mep_means{ko,kp};
        if isempty(temptrace)
            continue
        end
        baseline = median(abs(temptrace(end-base_length:end)));
        sd = std(temptrace(end-base_length:end));
        temptrace = (temptrace -mean(temptrace))/sd;
        
        delay_temp = ep_struct(pt_ind).mep.raw.delays_detect{ko,kp};
        amps_temp = ep_struct(pt_ind).mep.raw.amps_detect_z{ko,kp};
        
            if (ep_struct(pt_ind).mep.raw.labels_detect(ko,kp)) && (mep_labels_sm{pt_ind}(ko,kp))
                plot(x_plot+kp*offset_x,temptrace+ko*offset_y,col_code{1})
            elseif (ep_struct(pt_ind).mep.raw.labels_detect(ko,kp)) && ~(mep_labels_sm{pt_ind}(ko,kp)) %false positive; red
                plot(x_plot+kp*offset_x,temptrace+ko*offset_y,col_code{2})
            elseif ~(ep_struct(pt_ind).mep.raw.labels_detect(ko,kp)) && (mep_labels_sm{pt_ind}(ko,kp)) %false negative; blue
                plot(x_plot+kp*offset_x,temptrace+ko*offset_y,col_code{3})
            else
                plot(x_plot+kp*offset_x,temptrace+ko*offset_y,col_code{4})
            end
            if ~isempty(delay_temp) && show_marks
                for kq = 1:length(delay_temp)
                    delay_ind = find(x_plot>delay_temp(kq),1);
                    plot(x_plot(delay_ind) +kp*offset_x, temptrace(delay_ind) + ko*offset_y, 'k*', 'MarkerSize', 20);
                end
            end
            if show_sm_marks
                delay_temp = mep_delays_sm{pt_ind}(ko,kp);
                delay_ind = find(x_plot>delay_temp,1);
                plot(x_plot(delay_ind) +kp*offset_x, temptrace(delay_ind) + ko*offset_y, 'k*', 'MarkerSize', 20);
            end
            if show_thresh
                plot([x_plot(1), x_plot(end)]+kp*offset_x,[mean(temptrace) - thresh_to_plot,mean(temptrace) - thresh_to_plot ]+ko*offset_y,'k--')
                plot([x_plot(1), x_plot(end)]+kp*offset_x,[mean(temptrace) + thresh_to_plot,mean(temptrace) + thresh_to_plot ]+ko*offset_y,'k--')
            end

        
    end
    
    if show_thresh
        ltc_to_plot = latencies(emg_mapping_all{pt_ind}(kp),:);
        plot([x_plot(1), x_plot(end)]+kp*offset_x,[mean(temptrace) - thresh_to_plot,mean(temptrace) - thresh_to_plot ]+ko*offset_y,'k--')
        plot([x_plot(1), x_plot(end)]+kp*offset_x,[mean(temptrace) + thresh_to_plot,mean(temptrace) + thresh_to_plot ]+ko*offset_y,'k--')
        xline(kp*offset_x + ltc_to_plot(1) - latency_tolerance, 'k--'); xline(kp*offset_x + ltc_to_plot(2) + latency_tolerance, 'k--'); 
        %fprintf('Accuracy for %s: %.3f           Latency: %.3f - %.3f ms\n',ep_struct(pt_ind).mep.emg_labels{kp},acc_by_pt{pt_ind}(kp), ltc_to_plot(1)-latency_tolerance, ltc_to_plot(2)+latency_tolerance)
    else
        %fprintf('Accuracy for %s: %.3f\n',ep_struct(pt_ind).mep.emg_labels{kp},acc_by_pt{pt_ind}(kp))
    end
    
end

set(gca,'xTick',xtick_pos)
set(gca,'XtickLabel',ep_struct(pt_ind).mep.emg_labels)


%% plot example trace to play with peak finding settings
% t = linspace(0,100,size(ep_means,2));
pt_ind = 7;
window_base = 10;
%trialind = 6; emgind = 2; %ex. 
trialind = 20; emgind = 8;
latency_temp = [5 18];

thresh_to_plot = 3;

filt_hp = true;
filt_lp = true;
rem_ringing_art = true;

base_length = window_base*fs/1000;
latency_pts = round(latency_temp/1000*fs);

% %         baseline = median(abs(ep_means(kk,end-base_length:end)));
% %         thresh = sd_thresh*std(ep_means(kk,end-base_length:end));
% %         [pkval,loc] =  findpeaks(abs(ep_means(kk,latency_pts(1):latency_pts(2))),'MinPeakProminence',baseline+thresh,'MaxPeakWidth',fs*0.010,'MinPeakWidth',fs*0.0025);
% %         

f_hp = 10; f_lp = 2000;
[b_high, a_high] = butter(2,[20]/22000,'high');
[b_low, a_low] = butter(2,[1000]/22000,'low');

temptrace = double(ep_struct(pt_ind).mep.mep_means{trialind,emgind});
temptrace_og = temptrace; 

if filt_hp
    temptrace = filter(b_high, a_high, temptrace);
end
if filt_lp
    temptrace = filter(b_low, a_low, temptrace);
end
if rem_ringing_art
    [temptrace, artifact_fit] = ep_remove_ringing_artifact_erc((temptrace), [.005 .04], fs);
end

baseline = median(temptrace(end-base_length:end));
thresh = thresh_to_plot*std(temptrace(end-base_length:end));
temptrace = temptrace - baseline;
figure
subplot(1,2,1)
findpeaks(abs(temptrace(latency_pts(1):latency_pts(2))),'MinPeakHeight',3,'MaxPeakWidth',fs*0.015,'MinPeakWidth',fs*0.0005);
subplot(1,2,2)
plot(x_plot,temptrace)
hold on
plot(x_plot, temptrace_og)
xlabel('time (ms)')
ylabel('z-scored amplitude')

accs_by_pt_test = cell(9,1);

%% plot application of testing peak detection parameters vs. labels
%% plot raw traces colorized by detection overlap
pt_ind =6;
use_thresh = false;
show_marks = true;
show_thresh = true; thresh_to_plot = 2.5;

show_original = false; 

rem_ringing_art = false;
rem_art_mscale = false;
rem_art_pca = true;

filt_lp = false;
filt_hp = false;
filt_sg = false;

f_hp = 10; f_lp = 2000;
[b_high, a_high] = butter(2,[20]/22000,'high');
[b_low, a_low] = butter(2,[1000]/22000,'low');

figure
hold on
col_code = {'g','r','b','k'};
offset_y = 50; offset_x = 110; x_plot = linspace(1,100,2200); 
base_length = 220;

p_prominences = cell(size(ep_struct(pt_ind).mep.labels_detect));
p_widths = cell(size(ep_struct(pt_ind).mep.labels_detect)); 
p_locs = cell(size(ep_struct(pt_ind).mep.labels_detect));
p_amps_z = cell(size(ep_struct(pt_ind).mep.labels_detect)); 
pred_type = zeros(size(ep_struct(pt_ind).mep.labels_detect));

art_fits = cell(size(ep_struct(pt_ind).mep.labels_detect));

xtick_pos = (1:offset_x:offset_x*length(ep_struct(pt_ind).mep.emg_labels))+offset_x;
st_to_print = cell(length(ep_struct(pt_ind).mep.emg_labels),1);
for kp = 1:length(ep_struct(pt_ind).mep.emg_labels)
    detected_temp = zeros(size(ep_struct(pt_ind).mep.labels_detect,1),1);
    ltc_to_plot = latencies(emg_mapping_all{pt_ind}(kp),:) + [-latency_tolerance, latency_tolerance];
    
    for ko = 1:size(ep_struct(pt_ind).mep.labels_detect,1)
        temptrace = double(ep_struct(pt_ind).mep.mep_means{ko,kp});
        temptrace_og = temptrace;

        if isempty(temptrace)
            continue
        end
        if filt_sg
            freq=150;
            order=2;

            framelen=round(1/freq*fs);
            if mod(framelen,2)==0
                framelen=framelen+1;
            end
            temptrace = sgolayfilt(temptrace,order,15);
            
        end
        if rem_ringing_art
            [temptrace] = ep_remove_ringing_artifact_erc(temptrace, [.005 .015], fs);
        end
        
        if filt_hp
            temptrace = filtfilt(b_high, a_high, temptrace);
        end
        if filt_lp
            temptrace = filtfilt(b_low, a_low, temptrace);
        end
        
        if rem_art_pca
            mep_means = ep_struct(pt_ind).mep.raw.mep_means(ko,:)';
            dlep_means =  ep_struct(pt_ind).dlep.dlep_means(ko,:)';
            latencies_pca = latencies(emg_mapping_all{pt_ind}(kp),:) + [-latency_tolerance, latency_tolerance];
            [detected, amps, delays, amps_z, corr_traces, templates] = detect_mep_rejpca(mep_means, dlep_means, latencies_pca, mep_settings);

            
        else

            baseline = median((temptrace(end-base_length:end)));
            sd = std(temptrace(end-base_length:end));
            temptrace = (temptrace -baseline)/sd;
            latency_pts = round(ltc_to_plot/1000*fs);
        end
        
        if rem_art_mscale
            scales = 0.75:.025:1.25;
            [temptrace, template_fit, time, scale_min, dist_min] = remove_mep_artifact_mscale(temptrace, template_smoothed, scales, 2, 22000);
            
        end
        
        [pkval, loc, widths, prom] = findpeaks(abs(temptrace(latency_pts(1):latency_pts(2))),'MinPeakHeight',2.5,'MaxPeakWidth',fs*0.015,'MinPeakWidth',fs*0.0015,'MinPeakProminence',2.5);
        
        %         delay_temp = ep_struct(pt_ind).mep.delays_detect{ko,kp};
        %         amps_temp = ep_struct(pt_ind).mep.amps_detect_z{ko,kp};
        amps_temp = transpose(nan(size(pkval)));
        delays_temp = transpose(nan(size(pkval)));
        amps_z_temp = transpose(nan(size(pkval)));

        if ~isempty(pkval)
            detected = true;
            p_widths{ko,kp} = transpose(widths)/fs*1000;
            p_prominences{ko,kp} = transpose(prom);
            for kl = 1:length(pkval)
                amps_temp(kl) = pkval(kl);
                delays_temp(kl) = x_plot(loc(kl))+ltc_to_plot(1);
                amps_z_temp(kl) =  amps_temp(kl);
            end
            p_locs{ko,kp} = delays_temp;
            p_amps_z{ko,kp} = amps_z_temp;
        else
            detected = false;
        end
        detected_temp(ko) = detected;

        if show_original
            temptrace = temptrace_og;
        end

        if detected && (mep_labels_sm{pt_ind}(ko,kp))
            plot(x_plot+kp*offset_x,temptrace+ko*offset_y,col_code{1})
            pred_type(ko,kp) = 1;
        elseif detected && ~(mep_labels_sm{pt_ind}(ko,kp)) %false positive; red
            plot(x_plot+kp*offset_x,temptrace+ko*offset_y,col_code{2})
            pred_type(ko,kp) = 2;
        elseif ~detected && (mep_labels_sm{pt_ind}(ko,kp)) %false negative; blue
            plot(x_plot+kp*offset_x,temptrace+ko*offset_y,col_code{3})
            pred_type(ko,kp) = 3;
        else
            plot(x_plot+kp*offset_x,temptrace+ko*offset_y,col_code{4})
            pred_type(ko,kp) = 4;
        end
        if ~isempty(delays_temp) && show_marks
            for kq = 1:length(delays_temp)
                delay_ind = find(x_plot>delays_temp(kq),1);
                plot(x_plot(delay_ind) +kp*offset_x, temptrace(delay_ind) + ko*offset_y, 'k*', 'MarkerSize', 20);
            end
        end
        if show_thresh
            plot([x_plot(1), x_plot(end)]+kp*offset_x,[-thresh_to_plot,-thresh_to_plot ]+ko*offset_y,'k--')
            plot([x_plot(1), x_plot(end)]+kp*offset_x,[thresh_to_plot,thresh_to_plot ]+ko*offset_y,'k--')
        end


    end
    
    if show_thresh
        ltc_to_plot = latencies(emg_mapping_all{pt_ind}(kp),:);
%         plot([x_plot(1), x_plot(end)]+kp*offset_x,[mean(temptrace) - thresh_to_plot,mean(temptrace) - thresh_to_plot ]+ko*offset_y,'k--')
%         plot([x_plot(1), x_plot(end)]+kp*offset_x,[mean(temptrace) + thresh_to_plot,mean(temptrace) + thresh_to_plot ]+ko*offset_y,'k--')
        xline(kp*offset_x + ltc_to_plot(1) - latency_tolerance, 'k--'); xline(kp*offset_x + ltc_to_plot(2) + latency_tolerance, 'k--'); 
        st_to_print{kp} = sprintf('Accuracy for %s: %.3f           Latency: %.3f - %.3f ms',ep_struct(pt_ind).mep.emg_labels{kp},mean(detected_temp == mep_labels_sm{pt_ind}(:,kp)), ltc_to_plot(1)-latency_tolerance, ltc_to_plot(2)+latency_tolerance);
    else
        fprintf('Accuracy for %s: %.3f\n',ep_struct(pt_ind).mep.emg_labels{kp},acc_by_pt{pt_ind}(kp))
    end
    
end

set(gca,'xTick',xtick_pos)
set(gca,'XtickLabel',ep_struct(pt_ind).mep.emg_labels)
ylim([- 150 2500])

for kk = 1:length(st_to_print)
    fprintf([st_to_print{kk} '\n'])
end

%% Generate nice looking mep traces
pt_ind = 6;
emg_ind = 2;
trial_ind = 10;
% emg_ind = 5;
% trial_ind = 6;
thr = 60;
filt_sg = true;

show_detection = true;

temptrace = double(ep_struct(pt_ind).mep.mep_means{trial_ind,emg_ind});
baseline = median((temptrace(end-base_length:end)));
sd = std(temptrace(end-base_length:end));
%temptrace = (temptrace -baseline)/sd;
if filt_sg
    freq=150;
    order=2;

    framelen=round(1/freq*fs);
    if mod(framelen,2)==0
        framelen=framelen+1;
    end
    temptrace = sgolayfilt(temptrace,order,15);

end
figure('Position',[200 200 800 400])
plot(x_plot,temptrace,'LineWidth',2)
if show_detection
    hold on
    ltc_to_plot = latencies(emg_mapping_all{pt_ind}(emg_ind),:);
    %         plot([x_plot(1), x_plot(end)]+kp*offset_x,[mean(temptrace) - thresh_to_plot,mean(temptrace) - thresh_to_plot ]+ko*offset_y,'k--')
    %         plot([x_plot(1), x_plot(end)]+kp*offset_x,[mean(temptrace) + thresh_to_plot,mean(temptrace) + thresh_to_plot ]+ko*offset_y,'k--')
    xline(ltc_to_plot(1) - latency_tolerance, 'k--'); xline(ltc_to_plot(2) + latency_tolerance, 'k--');
end
xlim([0,50])
ylim([baseline-thr*sd,baseline+thr*sd])
xlabel('Post-stimulation time (ms)')
ylabel('EMG Voltage (uV)')
set(gca,'FontSize',14)

disp(ep_struct(pt_ind).mep.emg_labels(emg_ind))
inds_temp = find((mep_labels_sm{pt_ind}(:,emg_ind)))';
disp(inds_temp)

%% plot distributions of detected features 
muscle_to_plot = 6;

tp_inds = (pred_type(:, muscle_to_plot) == 1);
fp_inds = (pred_type(:, muscle_to_plot) == 2);

tp_locs = cell2mat(p_locs(tp_inds,muscle_to_plot));
fp_locs = cell2mat(p_locs(fp_inds,muscle_to_plot));
tp_prom = cell2mat(p_prominences(tp_inds,muscle_to_plot));
fp_prom = cell2mat(p_prominences(fp_inds,muscle_to_plot));
tp_ampz = cell2mat(p_amps_z(tp_inds,muscle_to_plot));
fp_ampz = cell2mat(p_amps_z(fp_inds,muscle_to_plot));
tp_width = cell2mat(p_widths(tp_inds,muscle_to_plot));
fp_width = cell2mat(p_widths(fp_inds,muscle_to_plot));

figure
subplot(2,2,1)
hold on
histogram(tp_locs,20)
histogram(fp_locs,20)
legend({'TP','FP'})
title('Latency')

subplot(2,2,2)
hold on
histogram(tp_width,20)
histogram(fp_width,20)
legend({'TP','FP'})
title('Peak Width')

subplot(2,2,3)
hold on
histogram(tp_ampz,20)
histogram(fp_ampz,20)
legend({'TP','FP'})
title('Peak Height')

subplot(2,2,4)
hold on
histogram(tp_prom,20)
histogram(fp_prom,20)
legend({'TP','FP'})
title('Peak Prominence')
suptitle(sprintf('EMG chan. %d', muscle_to_plot))

figure
subplot(1,2,1)
hold on
scatter(tp_prom, tp_width, 'b', 'filled')
scatter(fp_prom, fp_width, 'r', 'filled')
xlabel('Prominence (z-score)')
ylabel('Width (ms)')
legend({'TP','FP'})
subplot(1,2,2)
hold on
scatter(tp_ampz, tp_locs, 'b', 'filled')
scatter(fp_ampz, fp_locs, 'r', 'filled')
xlabel('Amplitude (z-score)')
ylabel('Latency (ms)')
legend({'TP','FP'})

tp_inds = (pred_type == 1);
fp_inds = (pred_type == 2);

tp_locs = cell2mat(p_locs(tp_inds));
fp_locs = cell2mat(p_locs(fp_inds));
tp_prom = cell2mat(p_prominences(tp_inds));
fp_prom = cell2mat(p_prominences(fp_inds));
tp_ampz = cell2mat(p_amps_z(tp_inds));
fp_ampz = cell2mat(p_amps_z(fp_inds));
tp_width = cell2mat(p_widths(tp_inds));
fp_width = cell2mat(p_widths(fp_inds));
suptitle(sprintf('EMG chan. %d', muscle_to_plot))

figure
subplot(2,2,1)
hold on
histogram(tp_locs,20)
histogram(fp_locs,20)
legend({'TP','FP'})
title('Latency')

subplot(2,2,2)
hold on
histogram(tp_width,20)
histogram(fp_width,20)
legend({'TP','FP'})
title('Peak Width')

subplot(2,2,3)
hold on
histogram(tp_ampz,20)
histogram(fp_ampz,20)
legend({'TP','FP'})
title('Peak Height')

subplot(2,2,4)
hold on
histogram(tp_prom,20)
histogram(fp_prom,20)
legend({'TP','FP'})
title('Peak Prominence')
suptitle('All muscles')

figure
subplot(1,2,1)
hold on
scatter(tp_prom, tp_width, 'b', 'filled')
scatter(fp_prom, fp_width, 'r', 'filled')
xlabel('Prominence (z-score)')
ylabel('Width (ms)')
legend({'TP','FP'})
subplot(1,2,2)
hold on
scatter(tp_ampz, tp_locs, 'b', 'filled')
scatter(fp_ampz, fp_locs, 'r', 'filled')
xlabel('Amplitude (z-score)')
ylabel('Latency (ms)')
legend({'TP','FP'})
suptitle('All muscles')



%%% same thing but with nina's labels

%% plot raw traces colorized by detection overlap
pt_ind =6;


use_thresh = false;
show_marks = true;
show_thresh = true; thresh_to_plot = 3;

rem_ringing_art = false;
filt_lp = false;
filt_hp = false;
filt_sg = false;

f_hp = 10; f_lp = 2000;
[b_high, a_high] = butter(2,[20]/22000,'high');
[b_low, a_low] = butter(2,[1000]/22000,'low');

figure
hold on
col_code = {'g','r','b','k'};
offset_y = 50; offset_x = 110; x_plot = linspace(1,100,2200); 
base_length = 220;

p_prominences = cell(size(ep_struct(pt_ind).mep.labels_detect));
p_widths = cell(size(ep_struct(pt_ind).mep.labels_detect)); 
p_locs = cell(size(ep_struct(pt_ind).mep.labels_detect));
p_amps_z = cell(size(ep_struct(pt_ind).mep.labels_detect)); 
pred_type = zeros(size(ep_struct(pt_ind).mep.labels_detect)); 

xtick_pos = (1:offset_x:offset_x*length(ep_struct(pt_ind).mep.emg_labels))+offset_x;
st_to_print = cell(length(ep_struct(pt_ind).mep.emg_labels),1);
for kp = 1:length(ep_struct(pt_ind).mep.emg_labels)
    detected_temp = zeros(size(ep_struct(pt_ind).mep.labels_detect,1),1);
    ltc_to_plot = latencies(emg_mapping_all{pt_ind}(kp),:) + [-latency_tolerance, latency_tolerance];
    
    for ko = 1:size(ep_struct(pt_ind).mep.labels_detect,1)
        temptrace = double(ep_struct(pt_ind).mep.mep_means{ko,kp});
        if isempty(temptrace)
            continue
        end
        if filt_sg
            freq=150;
            order=2;

            framelen=round(1/freq*fs);
            if mod(framelen,2)==0
                framelen=framelen+1;
            end
            temptrace = sgolayfilt(temptrace,order,framelen);
            
        end
        if rem_ringing_art
            [temptrace, artifact_fit] = ep_remove_ringing_artifact_erc((temptrace), [.005 .04], fs);
        end
        if filt_hp
            temptrace = filtfilt(b_high, a_high, temptrace);
        end
        if filt_lp
            temptrace = filtfilt(b_low, a_low, temptrace);
        end
        
        baseline = median((temptrace(end-base_length:end)));
        sd = std(temptrace(end-base_length:end));
        temptrace = (temptrace -baseline)/sd;
        latency_pts = round(ltc_to_plot/1000*fs);
        
        if (kp == 8) && (ko == 24)
            qqq = 2;
        end

        [pkval, loc, widths, prom] = findpeaks(abs(temptrace(latency_pts(1):latency_pts(2))),'MinPeakHeight',3,'MaxPeakWidth',fs*0.015,'MinPeakWidth',fs*0.0015,'MinPeakProminence',3);
        
        %         delay_temp = ep_struct(pt_ind).mep.delays_detect{ko,kp};
        %         amps_temp = ep_struct(pt_ind).mep.amps_detect_z{ko,kp};
        amps_temp = nan(size(pkval));
        delays_temp = nan(size(pkval));
        amps_z_temp = nan(size(pkval));

        if ~isempty(pkval)
            detected = true;
            p_widths{ko,kp} = widths;
            p_prominences{ko,kp} = prom;
            for kl = 1:length(pkval)
                amps_temp(kl) = pkval(kl);
                delays_temp(kl) = x_plot(loc(kl))+ltc_to_plot(1);
                amps_z_temp(kl) =  amps_temp(kl);
            end
            p_locs{ko,kp} = delays_temp;
            p_amps_z{ko,kp} = amps_z_temp;
        else
            detected = false;
        end
        detected_temp(ko) = detected;

        if detected && (mep_labels_sm{pt_ind}(ko,kp))
            plot(x_plot+kp*offset_x,temptrace+ko*offset_y,col_code{1})
            pred_type(ko) = 1;
        elseif detected && ~(mep_labels_sm{pt_ind}(ko,kp)) %false positive; red
            plot(x_plot+kp*offset_x,temptrace+ko*offset_y,col_code{2})
            pred_type(ko) = 2;
        elseif ~detected && (mep_labels_sm{pt_ind}(ko,kp)) %false negative; blue
            plot(x_plot+kp*offset_x,temptrace+ko*offset_y,col_code{3})
            pred_type(ko) = 3;
        else
            plot(x_plot+kp*offset_x,temptrace+ko*offset_y,col_code{4})
            pred_type(ko) = 4;
        end
        if ~isempty(delays_temp) && show_marks
            for kq = 1:length(delays_temp)
                delay_ind = find(x_plot>delays_temp(kq),1);
                plot(x_plot(delay_ind) +kp*offset_x, temptrace(delay_ind) + ko*offset_y, 'k*', 'MarkerSize', 20);
            end
        end
        if show_thresh
            plot([x_plot(1), x_plot(end)]+kp*offset_x,[-thresh_to_plot,-thresh_to_plot ]+ko*offset_y,'k--')
            plot([x_plot(1), x_plot(end)]+kp*offset_x,[thresh_to_plot,thresh_to_plot ]+ko*offset_y,'k--')
        end


    end
    
    if show_thresh
        ltc_to_plot = latencies(emg_mapping_all{pt_ind}(kp),:);
%         plot([x_plot(1), x_plot(end)]+kp*offset_x,[mean(temptrace) - thresh_to_plot,mean(temptrace) - thresh_to_plot ]+ko*offset_y,'k--')
%         plot([x_plot(1), x_plot(end)]+kp*offset_x,[mean(temptrace) + thresh_to_plot,mean(temptrace) + thresh_to_plot ]+ko*offset_y,'k--')
        xline(kp*offset_x + ltc_to_plot(1) - latency_tolerance, 'k--'); xline(kp*offset_x + ltc_to_plot(2) + latency_tolerance, 'k--'); 
        st_to_print{kp} = sprintf('Accuracy for %s: %.3f           Latency: %.3f - %.3f ms',ep_struct(pt_ind).mep.emg_labels{kp},mean(detected_temp == mep_labels_sm{pt_ind}(:,kp)), ltc_to_plot(1)-latency_tolerance, ltc_to_plot(2)+latency_tolerance);
    else
        fprintf('Accuracy for %s: %.3f\n',ep_struct(pt_ind).mep.emg_labels{kp},acc_by_pt{pt_ind}(kp))
    end
    
end

set(gca,'xTick',xtick_pos)
set(gca,'XtickLabel',ep_struct(pt_ind).mep.emg_labels)
ylim([- 150 2500])

for kk = 1:length(st_to_print)
    fprintf([st_to_print{kk} '\n'])
end

%% manually inspect and tune pca-based artifact rejection
pt_ind =6;
use_thresh = false;
show_marks = true;
show_thresh = true; thresh_to_plot = 2.5;

is_facial = [5,6,7,8,11,12,13];

show_original = false; 

rem_ringing_art = false;
rem_art_mscale = false;

rem_art_pca = true;
art_plot_template = true;
art_plot_corrected = false;

filt_lp = false;
filt_hp = false;
filt_sg = false;

mep_settings = struct();
mep_settings.art_window = [2,20];
mep_settings.art_detect = [3,6]; %window to check whether to apply art correction
mep_settings.art_thresh = 3; 
mep_settings.sd_thresh = 3;
mep_settings.fs = 22000;
mep_settings.base_length = 10;   %round(10*mep_settings.fs/1000);
mep_settings.pctl_thresh = 50;
mep_settings.use_dbs = true;
mep_settings.notch_filt_emg = true;
mep_settings.art_type = 'both';   %whether to fit artifact with EMG, LFP, or both
mep_settings.art_chans = 'facial'; %which chans to apply correction to
mep_settings.fit_type = 'median'; %how to fit/remove artifact template for individual channels
            %'proj' = ortho projection; 'median' = divide and scale by
            %median of fit; 'recon' (best) = reconstruct data without first PC

f_hp = 10; f_lp = 2000;
[b_high, a_high] = butter(2,[20]/22000,'high');
[b_low, a_low] = butter(2,[1000]/22000,'low');

figure
hold on
col_code = {'g','r','b','k'};
offset_y = 50; offset_x = 110; x_plot = linspace(1,100,2200); 
base_length = 220;

p_prominences = cell(size(ep_struct(pt_ind).mep.raw.labels_detect));
p_widths = cell(size(ep_struct(pt_ind).mep.raw.labels_detect)); 
p_locs = cell(size(ep_struct(pt_ind).mep.raw.labels_detect));
p_amps_z = cell(size(ep_struct(pt_ind).mep.raw.labels_detect)); 
pred_type = zeros(size(ep_struct(pt_ind).mep.raw.labels_detect));

art_fits = cell(size(ep_struct(pt_ind).mep.raw.labels_detect));

xtick_pos = (1:offset_x:offset_x*length(ep_struct(pt_ind).mep.emg_labels))+offset_x;
st_to_print = cell(length(ep_struct(pt_ind).mep.emg_labels),1);

for kp = 1:length(ep_struct(pt_ind).mep.emg_labels)
    detected_temp = zeros(size(ep_struct(pt_ind).mep.raw.labels_detect,1),1);
    ltc_to_plot = latencies(emg_mapping_all{pt_ind}(kp),:) + [-latency_tolerance, latency_tolerance];
    [facial_log,facial_inds] = ismember(emg_mapping_all{pt_ind},is_facial);

    mep_settings.is_facial = logical(facial_log);

    tr_counter = 1;

    for ko = 1:size(ep_struct(pt_ind).mep.raw.labels_detect,1)
        temptrace = ep_struct(pt_ind).mep.raw.mep_means{ko,kp};
        temptrace_og = temptrace;

        if isempty(temptrace)
            continue
        end
        if filt_sg
            freq=150;
            order=2;

            framelen=round(1/freq*fs);
            if mod(framelen,2)==0
                framelen=framelen+1;
            end
            temptrace = sgolayfilt(temptrace,order,15);
            
        end
        if rem_ringing_art
            [temptrace] = ep_remove_ringing_artifact_erc(temptrace, [.005 .015], fs);
        end
        
        if filt_hp
            temptrace(40:end) = filtfilt(b_high, a_high, temptrace(40:end));
        end
        if filt_lp
            temptrace(40:end) = filtfilt(b_low, a_low, temptrace(40:end));
        end
        
        if (kp == 5) && (ko == 5)
            qqq = 2;
        end

        if rem_art_pca
            mep_means = ep_struct(pt_ind).mep.raw.mep_means(ko,:)';
            dlep_means =  ep_struct(pt_ind).dlep.raw_means(ko,:)';
            latencies_pca = latencies(emg_mapping_all{pt_ind},:) + [-latency_tolerance, latency_tolerance];
            [detected, amps, delays, amps_z, corr_traces, templates] = detect_mep_rejpca(mep_means, dlep_means, latencies_pca, mep_settings);
            pc_template = templates{kp};
            corr_trace = corr_traces{kp};
            t_art_samps = round(mep_settings.art_window*fs/1000);
            detected = detected(kp);

            baseline = median((temptrace(end-base_length:end)));
            sd = std(temptrace(end-base_length:end));
            temptrace = (temptrace -baseline)/sd;
            latency_pts = round(ltc_to_plot/1000*fs);
        else
            baseline = median((temptrace(end-base_length:end)));
            sd = std(temptrace(end-base_length:end));
            temptrace = (temptrace -baseline)/sd;
            latency_pts = round(ltc_to_plot/1000*fs);
        end
        
        if rem_art_mscale
            scales = 0.75:.025:1.25;
            [temptrace, template_fit, time, scale_min, dist_min] = remove_mep_artifact_mscale(temptrace, template_smoothed, scales, 2, 22000);
            
        end

        latency_pts = round(ltc_to_plot*fs/1000);
        [pkval, loc, widths, prom] = findpeaks(abs(corr_traces{kp}(latency_pts(1):latency_pts(2))),'MinPeakHeight',2.5,'MaxPeakWidth',fs*0.015,'MinPeakWidth',fs*0.0015,'MinPeakProminence',2.5);
        
        %         delay_temp = ep_struct(pt_ind).mep.delays_detect{ko,kp};
        %         amps_temp = ep_struct(pt_ind).mep.amps_detect_z{ko,kp};
        amps_temp = transpose(nan(size(pkval)));
        delays_temp = transpose(nan(size(pkval)));
        amps_z_temp = transpose(nan(size(pkval)));
        if ~rem_art_pca
            if ~isempty(pkval)
                detected = true;
                p_widths{ko,kp} = transpose(widths)/fs*1000;
                p_prominences{ko,kp} = transpose(prom);
                for kl = 1:length(pkval)
                    amps_temp(kl) = pkval(kl);
                    delays_temp(kl) = x_plot(loc(kl))+ltc_to_plot(1);
                    amps_z_temp(kl) =  amps_temp(kl);
                end
                p_locs{ko,kp} = delays_temp;
                p_amps_z{ko,kp} = amps_z_temp;
            else
                detected = false;
            end
        end
        detected_temp(ko) = detected;

        if show_original
            temptrace = temptrace_og;
        end

        if detected && (mep_labels_sm{pt_ind}(ko,kp))
            plot(x_plot+kp*offset_x,temptrace+ko*offset_y,col_code{1})
            pred_type(ko,kp) = 1;
        elseif detected && ~(mep_labels_sm{pt_ind}(ko,kp)) %false positive; red
            plot(x_plot+kp*offset_x,temptrace+ko*offset_y,col_code{2})
            pred_type(ko,kp) = 2;
        elseif ~detected && (mep_labels_sm{pt_ind}(ko,kp)) %false negative; blue
            plot(x_plot+kp*offset_x,temptrace+ko*offset_y,col_code{3})
            pred_type(ko,kp) = 3;
        else
            plot(x_plot+kp*offset_x,temptrace+ko*offset_y,col_code{4})
            pred_type(ko,kp) = 4;
        end

        if rem_art_pca && art_plot_template
            templ_offset = median(temptrace(t_art_samps(1):t_art_samps(2)) - pc_template);
            plot(x_plot(t_art_samps(1):t_art_samps(2))+kp*offset_x, pc_template+templ_offset+ko*offset_y, 'm--')
        elseif rem_art_pca && art_plot_corrected

            plot(x_plot+kp*offset_x,corr_trace+ko*offset_y,col_code{4})
        end

        if ~isempty(delays_temp) && show_marks
            for kq = 1:length(delays_temp)
                delay_ind = find(x_plot>delays_temp(kq),1);
                plot(x_plot(delay_ind) +kp*offset_x, temptrace(delay_ind) + ko*offset_y, 'k*', 'MarkerSize', 20);
            end
        end
        if show_thresh
            plot([x_plot(1), x_plot(end)]+kp*offset_x,[-thresh_to_plot,-thresh_to_plot ]+ko*offset_y,'k--')
            plot([x_plot(1), x_plot(end)]+kp*offset_x,[thresh_to_plot,thresh_to_plot ]+ko*offset_y,'k--')
        end

        tr_counter = tr_counter + 1;
    end
    
    if show_thresh
        ltc_to_plot = latencies(emg_mapping_all{pt_ind}(kp),:);
%         plot([x_plot(1), x_plot(end)]+kp*offset_x,[mean(temptrace) - thresh_to_plot,mean(temptrace) - thresh_to_plot ]+ko*offset_y,'k--')
%         plot([x_plot(1), x_plot(end)]+kp*offset_x,[mean(temptrace) + thresh_to_plot,mean(temptrace) + thresh_to_plot ]+ko*offset_y,'k--')
        xline(kp*offset_x + ltc_to_plot(1) - latency_tolerance, 'k--'); xline(kp*offset_x + ltc_to_plot(2) + latency_tolerance, 'k--'); 
        %%
        %st_to_print{kp} = sprintf('Accuracy for %s: %.3f           Latency: %.3f - %.3f ms',ep_struct(pt_ind).mep.emg_labels{kp},mean(detected_temp == mep_labels_sm{pt_ind}(:,kp)), ltc_to_plot(1)-latency_tolerance, ltc_to_plot(2)+latency_tolerance);
    else
        fprintf('Accuracy for %s: %.3f\n',ep_struct(pt_ind).mep.emg_labels{kp},acc_by_pt{pt_ind}(kp))
    end
    
end

set(gca,'xTick',xtick_pos)
set(gca,'XtickLabel',ep_struct(pt_ind).mep.emg_labels)
ylim([- 150 2500])

for kk = 1:length(st_to_print)
    fprintf([st_to_print{kk} '\n'])
end

%% test mEP artifact rejection on individual examples
pt_ind =6;
ko = 5;

offset_y = 100; offset_x = 110; x_plot = linspace(1,100,2200); 
%base_length = 220;
sd_thresh = 8;

use_thresh = false;
show_marks = true;
show_thresh = true; thresh_to_plot = 2.5;

base_length = 10;

is_facial = [5,6,7,8,11,12,13];

show_original = false; 

rem_ringing_art = false;
rem_art_mscale = false;

rem_art_pca = true;
art_plot_template = true;
art_plot_corrected = false;

filt_lp = false;
filt_hp = false;
filt_sg = false;

mep_settings = struct();
mep_settings.art_window = [2,20];
mep_settings.art_detect = [3,6]; %window to check whether to apply art correction
mep_settings.art_thresh = 3; 
mep_settings.sd_thresh = 3;
mep_settings.fs = 22000;
mep_settings.base_length = 10;   %round(10*mep_settings.fs/1000);
mep_settings.pctl_thresh = 50;
mep_settings.use_dbs = true;
mep_settings.notch_filt_emg = true;
mep_settings.art_type = 'both';   %whether to fit artifact with EMG, LFP, or both
mep_settings.art_chans = 'facial'; %which chans to apply correction to
mep_settings.fit_type = 'recon'; %how to fit/remove artifact template for individual channels
            %'proj' = ortho projection; 'median' = divide and scale by
            %median of fit; 'recon' (best) = reconstruct data without first PC

figure
hold on
for kp = 1:length(ep_struct(pt_ind).mep.emg_labels)
    detected_temp = zeros(size(ep_struct(pt_ind).mep.raw.labels_detect,1),1);
    ltc_to_plot = latencies(emg_mapping_all{pt_ind}(kp),:) + [-latency_tolerance, latency_tolerance];
    [facial_log,facial_inds] = ismember(emg_mapping_all{pt_ind},is_facial);

    mep_settings.is_facial = logical(facial_log);

    temptrace = ep_struct(pt_ind).mep.raw.mep_means{ko,kp};
    temptrace_og = temptrace;

    if isempty(temptrace)
        continue
    end
    if filt_sg
        freq=150;
        order=2;

        framelen=round(1/freq*fs);
        if mod(framelen,2)==0
            framelen=framelen+1;
        end
        temptrace = sgolayfilt(temptrace,order,15);

    end
    if rem_ringing_art
        [temptrace] = ep_remove_ringing_artifact_erc(temptrace, [.005 .015], fs);
    end

    if filt_hp
        temptrace = filtfilt(b_high, a_high, temptrace);
    end
    if filt_lp
        temptrace = filtfilt(b_low, a_low, temptrace);
    end

    if (kp == 5) && (ko == 5)
        qqq = 2;
    end

    if rem_art_pca
        mep_means = ep_struct(pt_ind).mep.raw.mep_means(ko,:)';
        dlep_means =  ep_struct(pt_ind).dlep.raw_means(ko,:)';
        latencies_pca = latencies(emg_mapping_all{pt_ind},:) + [-latency_tolerance, latency_tolerance];
        [detected, amps, delays, amps_z, corr_traces, templates] = detect_mep_rejpca(mep_means, dlep_means, latencies_pca, mep_settings);
        pc_template = templates{kp};
        corr_trace = corr_traces{kp};
        t_art_samps = round(mep_settings.art_window*fs/1000);
        detected = detected(kp);

        baseline = median((temptrace(end-base_length:end)));
        sd = std(temptrace(end-base_length:end));
        temptrace = (temptrace -baseline)/sd;
        latency_pts = round(ltc_to_plot/1000*fs);
    else
        baseline = median((temptrace(end-base_length:end)));
        sd = std(temptrace(end-base_length:end));
        temptrace = (temptrace -baseline)/sd;
        latency_pts = round(ltc_to_plot/1000*fs);
    end

    if rem_art_mscale
        scales = 0.75:.025:1.25;
        [temptrace, template_fit, time, scale_min, dist_min] = remove_mep_artifact_mscale(temptrace, template_smoothed, scales, 2, 22000);

    end

    latency_pts = round(ltc_to_plot*fs/1000);
    [pkval, loc, widths, prom] = findpeaks(abs(corr_traces{kp}(latency_pts(1):latency_pts(2))),'MinPeakHeight',2.5,'MaxPeakWidth',fs*0.015,'MinPeakWidth',fs*0.0015,'MinPeakProminence',2.5);

    %         delay_temp = ep_struct(pt_ind).mep.delays_detect{ko,kp};
    %         amps_temp = ep_struct(pt_ind).mep.amps_detect_z{ko,kp};
    amps_temp = transpose(nan(size(pkval)));
    delays_temp = transpose(nan(size(pkval)));
    amps_z_temp = transpose(nan(size(pkval)));
    if ~rem_art_pca
        if ~isempty(pkval)
            detected = true;
            p_widths{ko,kp} = transpose(widths)/fs*1000;
            p_prominences{ko,kp} = transpose(prom);
            for kl = 1:length(pkval)
                amps_temp(kl) = pkval(kl);
                delays_temp(kl) = x_plot(loc(kl))+ltc_to_plot(1);
                amps_z_temp(kl) =  amps_temp(kl);
            end
            p_locs{ko,kp} = delays_temp;
            p_amps_z{ko,kp} = amps_z_temp;
        else
            detected = false;
        end
    end
    detected_temp(ko) = detected;

    if show_original
        temptrace = temptrace_og;
    end

    if detected && (mep_labels_sm{pt_ind}(ko,kp))
        plot(x_plot,temptrace+kp*offset_y,col_code{1})
        pred_type(ko,kp) = 1;
    elseif detected && ~(mep_labels_sm{pt_ind}(ko,kp)) %false positive; red
        plot(x_plot,temptrace+kp*offset_y,col_code{2})
        pred_type(ko,kp) = 2;
    elseif ~detected && (mep_labels_sm{pt_ind}(ko,kp)) %false negative; blue
        plot(x_plot,temptrace+kp*offset_y,col_code{3})
        pred_type(ko,kp) = 3;
    else
        plot(x_plot,temptrace+kp*offset_y,col_code{4})
        pred_type(ko,kp) = 4;
    end

    if rem_art_pca && art_plot_template
        templ_offset = median(temptrace(t_art_samps(1):t_art_samps(2)) - pc_template);
        plot(x_plot(t_art_samps(1):t_art_samps(2)), pc_template+templ_offset+kp*offset_y, 'm--')
    elseif rem_art_pca && art_plot_corrected

        plot(x_plot,corr_trace+kp*offset_y,col_code{4})
    end

    if ~isempty(delays_temp) && show_marks
        for kq = 1:length(delays_temp)
            delay_ind = find(x_plot>delays_temp(kq),1);
            plot(x_plot(delay_ind), temptrace(delay_ind) + kp*offset_y, 'k*', 'MarkerSize', 20);
        end
    end
    if show_thresh
        plot([x_plot(1), x_plot(end)],[-thresh_to_plot,-thresh_to_plot ]+kp*offset_y,'k--')
        plot([x_plot(1), x_plot(end)],[thresh_to_plot,thresh_to_plot ]+kp*offset_y,'k--')
    end

    tr_counter = tr_counter + 1;

end

ylim([-100,900])


%% check agreement between SM and CO labels
acc_agree = [];

for kk = 1:length(pt_inds_co)

    temp_labels = (mep_labels_co(pt_inds_co(kk)).labels(:,emg_mapping_sm{kk}));
    tempacc = mean(temp_labels == mep_labels_sm{pt_inds_co_sm(kk)});
    fprintf('%s\n',mep_labels_co(pt_inds_co(kk)).patient_ID); disp(tempacc);

    acc_agree = [acc_agree; mean(temp_labels == mep_labels_sm{pt_inds_co_sm(kk)})];
end

%% check whether time-domain notch works on mep traces
tt_td = linspace(0,0.1,2200);
temp = ep_struct(7).mep.raw.mep_means{21,2};
temp = temp-median(temp);

figure
plot(tt_td,temp)
hold on
tic
[tempfilt, fit, A, phi] = td_notch(temp,tt_td,60,22000);
%[tempfilt, fit, A, phi] = td_notch(tempfilt,tt_td,120,22000);
plot(tt_td,tempfilt)
toc

disp(A); disp(phi);

ylim([-100,100])

function [new_trace, template_fit, time, scale_min, dist_min] = remove_mep_artifact_mscale(trace, template, scales, time, fs)
    %TO DO: resample/stretch template to different lengths and evaluate
    %which has best fit before subtracting artifact
    start_ind = round(time*fs/1000);
    ortho_proj = @(A,B) (sum(A.*B)/(norm(B)^2))*B;

    templates = cell(size(scales));
    trace_subsets = cell(size(scales));
    dists = zeros(size(scales));

    for kk = 1:length(scales)
        template_rs = resample(template, (round(scales(kk)*fs)), fs);
        templates{kk}=ortho_proj(trace(start_ind:start_ind+length(template_rs)-1), template_rs);
        dists(kk) = norm(trace(start_ind:start_ind+length(template_rs)-1)-templates{kk});
    end
    [dist_min, dist_ind] = min(dists);
    scale_min = scales(dist_ind);
    template_fit = templates{dist_ind};
    new_trace = trace;
    new_trace(start_ind:start_ind+length(template_fit)-1) = new_trace(start_ind:start_ind+length(template_fit)-1) - template_fit;
end

function [new_trace, template_fit, time, scale_min, corr_min, dist_min] = remove_mep_artifact_mscale_v2(trace, template, scales, thresh, time, fs)
    %TO DO: adjust for different templates, include a corr coefficient
    %threshold for best fit to decide whether to sbutarct
    start_ind = round(time*fs/1000);
    ortho_proj = @(A,B) (sum(A.*B)/(norm(B)^2))*B;

    templates = cell(size(scales));
    trace_subsets = cell(size(scales));
    dists = zeros(size(scales));

    for kk = 1:length(scales)
        template_rs = resample(template, (round(scales(kk)*fs)), fs);
        templates{kk}=ortho_proj(trace(start_ind:start_ind+length(template_rs)-1), template_rs);
        dists(kk) = norm(trace(start_ind:start_ind+length(template_rs)-1)-templates{kk});
    end
    [dist_min, dist_ind] = min(dists);
    scale_min = scales(dist_ind);
    template_fit = templates{dist_ind};
    new_trace = trace;
    new_trace(start_ind:start_ind+length(template_fit)-1) = new_trace(start_ind:start_ind+length(template_fit)-1) - template_fit;
end

function [detected, amps, delays, amps_z, corr_traces, templates] = detect_mep_rejpca(mep_means, dlep_means, latencies, mep_settings)
    %detect meps in facial muscles. this version derives a template of the
    %artifact by performing PCA across recording channels
    %
    %example settings:
%     mep_settings = struct();
%     mep_settings.art_window = [1,20];
%     mep_settings.art_detect = [3,6]; %window to check whether to apply art correction
%     mep_settings.art_thresh = 3;
%     mep_settings.sd_thresh = 3;
%     mep_settings.fs = 22000;
%     mep_settings.base_length = 10;   %round(10*mep_settings.fs/1000);
%     mep_settings.pctl_thresh = 50;
%     mep_settings.use_dbs = true;
%     mep_settings.notch_filt_emg = true;
%     mep_settings.art_type = 'both';
    art_type = mep_settings.art_type;
    art_window = mep_settings.art_window;
    z_thresh = mep_settings.sd_thresh;
    base_length = mep_settings.base_length;
    fs = mep_settings.fs;
    fit_type = mep_settings.fit_type;
    is_facial = mep_settings.is_facial;
    
    ortho_proj = @(A,B) (sum(A.*B)/(norm(B)^2))*B;
    
    n_emg = length(mep_means);
    detected = nan(1,n_emg);
    amps = cell(1,n_emg);
    delays = cell(1,n_emg);
    amps_z = cell(1,n_emg);
    corr_traces = cell(1,n_emg);
    templates = cell(1,n_emg);

    t_art_samps = round(art_window*fs/1000);
    t_art_samps_dlep = t_art_samps;

    z_traces = nan(n_emg,length(mep_means{1}));
    for kl = 1:n_emg
        temptrace = mep_means{kl};

        baseline = median((temptrace(end-base_length:end)));
        sd = std(temptrace(end-base_length:end));
        temptrace = (temptrace -baseline)/sd;

        z_traces(kl,:) = temptrace;
    end
    %dlep_traces = cellfun(@minus,ep_struct(pt_ind).dlep.dlep_means(kk,:),ep_struct(pt_ind).dlep.dlep_means_filt(kk,:),'Un',0);
    if ~(strcmp(art_type,'emg'))
        dlep_inds = cellfun(@(x) length(x)>1,dlep_means,'UniformOutput',true);
        dlep_length  = max(cellfun(@length,dlep_means));
        z_traces_dlep = zeros(sum(dlep_inds),dlep_length);
    else
        dlep_inds = [];
    end

    counter = 1;
    for kl = find(dlep_inds)
        temptrace = dlep_means{kl};

        baseline = median(abs(temptrace(end-base_length:end)));
        sd = std(temptrace(end-base_length:end));
        temptrace = (temptrace -baseline)/sd;

        z_traces_dlep(counter,:) = temptrace;

        counter = counter + 1;
    end
    %z_traces_dlep(~dlep_inds,:) = [];
    
    if strcmp(art_type,'dlep')
        [COEFF, SCORE, LATENT, TSQUARED, EXPLAINED, MU] = pca(z_traces_dlep(:,t_art_samps_dlep(1):t_art_samps_dlep(2)),'Centered',false);
    elseif strcmp(art_type,'both')
        dlep_temp = z_traces_dlep(:,t_art_samps_dlep(1):t_art_samps_dlep(2));
        dlep_temp = (dlep_temp - median(dlep_temp(:)))./(max(dlep_temp(:))-min(dlep_temp(:)));
        if strcmp(mep_settings.art_chans, 'facial')
            mep_temp = z_traces(mep_settings.is_facial,t_art_samps(1):t_art_samps(2));
        else
            mep_temp = [z_traces(mep_settings.is_facial,t_art_samps(1):t_art_samps(2)); z_traces(~mep_settings.is_facial,t_art_samps(1):t_art_samps(2))];
        end
        %mep_temp = (mep_temp - median(mep_temp(:)))./(max(mep_temp(:))-min(mep_temp(:)));
        [COEFF, SCORE, LATENT, TSQUARED, EXPLAINED, MU] = pca([mep_temp; dlep_temp],'Centered',false);
    elseif strcmp(art_type,'emg')
        if strcmp(mep_settings.art_chans, 'facial')
            [COEFF, SCORE, LATENT, TSQUARED, EXPLAINED, MU] = pca(z_traces(is_facial,t_art_samps(1):t_art_samps(2)),'Centered',false);
        else
            mep_temp = [z_traces(mep_settings.is_facial,t_art_samps(1):t_art_samps(2)); z_traces(~mep_settings.is_facial,t_art_samps(1):t_art_samps(2))];
            [COEFF, SCORE, LATENT, TSQUARED, EXPLAINED, MU] = pca(mep_temp,'Centered',false);
        end
    end
    art_template = COEFF(:,1)';
    %art_template = mean(z_traces(:,t_art_samps(1):t_art_samps(2)));
    %art_template = median(z_traces(:,t_art_samps(1):t_art_samps(2)));

    ch_counter = 1;
    for kl = 1:n_emg
        %%% ADD: reconstruction mode
        if (strcmp(mep_settings.art_chans,'facial') && mep_settings.is_facial(kl)) && strcmp(fit_type,'recon')
            ch_sel = ch_counter; %if only using some channels for PCA, make sure we use the right one
            ch_counter = ch_counter + 1;
        else
            ch_sel = kl;
        end

        if strcmp(fit_type,'proj')
            template_fit = ortho_proj(z_traces(kl,t_art_samps(1):t_art_samps(2)),art_template);
        elseif strcmp(fit_type,'median')
            temp1 = z_traces(kl,t_art_samps(1):t_art_samps(2)) - median(z_traces(kl,t_art_samps(1):t_art_samps(2)));
            temp2 = art_template - median(art_template);
            template_fit = art_template*median(temp1./temp2);
        elseif strcmp(fit_type,'pctl')
            temp1 = z_traces(kl,t_art_samps(1):t_art_samps(2)) - median(z_traces(kl,t_art_samps(1):t_art_samps(2)));
            temp2 = art_template - median(art_template);
            template_fit = art_template*prctile(temp1./temp2, 20);
        elseif strcmp(fit_type,'recon')
            temp1 = SCORE(ch_sel,:); temp1(2:end) = 0;
            template_fit = temp1*COEFF';
        end


        if strcmp(fit_type,'recon')
            temp1 = SCORE(ch_sel,:); temp1(1) = 0;
            temptrace = z_traces(kl,:);
            temptrace(t_art_samps(1):t_art_samps(2)) = temp1*COEFF';
        else
            temptrace = z_traces(kl,:);
            temptrace(t_art_samps(1):t_art_samps(2)) = temptrace(t_art_samps(1):t_art_samps(2)) - template_fit;
        end
%         else
%             temptrace = z_traces(kl,:); 
%             template_fit = zeros(size(temptrace));
%         end
        if (strcmp(mep_settings.art_chans,'facial') && ~mep_settings.is_facial(kl))
            temptrace = z_traces(kl,:);
            template_fit = zeros(size(temptrace(t_art_samps(1):t_art_samps(2))));
        end
        
        [detected(kl), amps{kl}, delays{kl}, amps_z{kl}] = ep_thresh_windowed(temptrace,base_length,z_thresh,fs,latencies(kl,:));
        corr_traces{kl} = temptrace;
        templates{kl} = template_fit;
        
    end

end


function [detected, amps, delays, amps_z] = ep_thresh_windowed(ep_means,window_base,sd_thresh,fs,latency)
    detected = zeros(size(ep_means,1),1);
    amps = cell(size(detected));
    delays = cell(size(detected));
    amps_z = cell(size(detected));

    t = linspace(0,100,size(ep_means,2));
    base_length = window_base*fs/1000;
    latency_pts = round(latency/1000*fs);
    for kk = 1:size(ep_means,1)
%         baseline = median(abs(ep_means(kk,end-base_length:end)));
%         thresh = sd_thresh*std(ep_means(kk,end-base_length:end));
%         [pkval,loc] =  findpeaks(abs(ep_means(kk,latency_pts(1):latency_pts(2))),'MinPeakProminence',baseline+thresh,'MaxPeakWidth',fs*0.010,'MinPeakWidth',fs*0.0025);
%         
        temptrace = ep_means(kk,:);
        baseline = median(ep_means(kk,end-base_length:end));
        thresh = sd_thresh*std(ep_means(kk,end-base_length:end));
        temptrace = temptrace - baseline;
            %old settings from 1/17
        %[pkval,loc] =  findpeaks(abs(temptrace(latency_pts(1):latency_pts(2))),'MinPeakProminence',thresh,'MaxPeakWidth',fs*0.010,'MinPeakWidth',fs*0.0025);
        
            %medium version
        %[pkval,loc] =  findpeaks(abs(temptrace(latency_pts(1):latency_pts(2))),'MinPeakHeight',thresh,'MaxPeakWidth',fs*0.010,'MinPeakWidth',fs*0.001);
        
            %after tuning:
        [pkval,loc] =  findpeaks(abs(temptrace(latency_pts(1):latency_pts(2))),'MinPeakHeight',2.5,'MaxPeakWidth',fs*0.015,'MinPeakWidth',fs*0.0015,'MinPeakProminence',2.5);


        amps_temp = nan(size(pkval));
        delays_temp = nan(size(pkval));
        amps_z_temp = nan(size(pkval));

        if ~isempty(pkval)
            detected(kk) = 1;
            for kl = 1:length(pkval)
                amps_temp(kl) = pkval(kl);
                delays_temp(kl) = t(loc(kl))+latency(1);
                amps_z_temp(kl) = (amps_temp(kl)-baseline)/(thresh/sd_thresh);
            end
        end
        amps{kk} = amps_temp;
        delays{kk} = delays_temp;
        amps_z{kk} = amps_z_temp;
    end
    detected = logical(detected);
end

function [yfilt, yest, A, phi] = td_notch(y,t,freq,fs)
    %time-domain notch filter: determines phase of component at frequency
    %'freq' and subtracts a sine wave in time domain
    %
    %y: signal for filtering
    %t: array of time indices (e.g. 0-100 ms)
    %freq: frequency for notch filt
    %fs: sample rate
    %
    %yfilt: signal with subtracted sinusoid
    %yest: fit sine component
    %A: amplitude of fit sinusoid
    %phi: phase of fit sinusoid

    L = length(t);
    f = fs/L*(0:L-1);

    yfft = fft(y);
    phase = angle(yfft)* 180/pi+90;

    ortho_proj = @(A,B) (sum(A.*B)/(norm(B)^2))*B;

    ind = find(f >=freq, 1);

    %yest = ortho_proj(y, sin(60*2*pi*t+phase(ind)*(pi/180)));
    yest = sin(60*2*pi*t+phase(ind)*(pi/180));
    yscale = abs(median(y./yest));
    yest = yest*yscale;

    %A = max(yest);
    A=yscale;

    phi = phase(ind);
    yfilt = y - yest;

end
